<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2019/undefined/test"/>
      <url>/2019/undefined/test</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> undefined </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux之ssh</title>
      <link href="/2019/linux/ssh"/>
      <url>/2019/linux/ssh</url>
      
        <content type="html"><![CDATA[<h1 id="1-ssh简介"><a href="#1-ssh简介" class="headerlink" title="1 ssh简介"></a>1 ssh简介</h1><p>SSH （Secure Shell）是建立在应用层基础上的安全协议。SSH仅仅是一<strong>协议标准</strong>，其具体的实现有很多，既有开源实现的OpenSSH，也有商业实现方案。使用范围最广泛的当然是开源实现OpenSSH。</p><h1 id="2-ssh原理"><a href="#2-ssh原理" class="headerlink" title="2 ssh原理"></a>2 ssh原理</h1><p>对称加密和非对称加密</p><p><a href="https://blog.csdn.net/loushuai/article/details/82750553" target="_blank" rel="noopener">ssh的原理</a></p><p><a href="https://blog.csdn.net/itcast_cn/article/details/87181095" target="_blank" rel="noopener">ssh的相关知识</a></p><p><a href="https://www.cnblogs.com/diffx/p/9553587.html" target="_blank" rel="noopener">https://www.cnblogs.com/diffx/p/9553587.html</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">数字签名</a></p><p><a href="https://www.jellythink.com/archives/555" target="_blank" rel="noopener">https://www.jellythink.com/archives/555</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABC</title>
      <link href="/2019/undefined/ABC"/>
      <url>/2019/undefined/ABC</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> undefined </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python函数参数传递是传值还是传引用</title>
      <link href="/2019/python/python%E5%87%BD%E6%95%B0%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%8F%82"/>
      <url>/2019/python/python%E5%87%BD%E6%95%B0%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%8F%82</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>在 C/C++ 中，传值和传引用是函数参数传递的两种方式，因此，在Python 函数中，参数是传值，还是传引用？</p><p>回答这个问题前，不如先来看两段代码。</p><p>代码段1：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(arg):</span><br><span class="line">    arg = 2</span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line">a = 1</span><br><span class="line">foo(a)  # 输出：2</span><br><span class="line">print(a) # 输出：1</span><br></pre></td></tr></tbody></table></figure><p>看了代码段1的同学可能会说参数是值传递。</p><p>代码段2：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def bar(args):</span><br><span class="line">    args.append(1)</span><br><span class="line"></span><br><span class="line">b = []</span><br><span class="line">print(b)#　输出：[]</span><br><span class="line">print(id(b)) # 输出：4324106952</span><br><span class="line">bar(b)</span><br><span class="line">print(b) ＃　输出：[1]</span><br><span class="line">print(id(b))  # 输出：4324106952</span><br></pre></td></tr></tbody></table></figure><p>看了代码段2，这时可能又有人会说，参数是传引用，那么问题来了，参数传递到底是传值还是传引用或者两者都不是？</p><p>为了把这个问题弄清楚，先了解 Python 中变量与对象之间的关系。</p><a id="more"></a><h1 id="2-变量与对象"><a href="#2-变量与对象" class="headerlink" title="2 变量与对象"></a>2 变量与对象</h1><p>Python 中一切皆为对象，数字是对象，列表是对象，函数也是对象，任何东西都是对象。而变量是对象的一个引用（又称为名字或者标签），对象的操作都是通过引用来完成的。例如，<code>[]</code>是一个空列表对象，变量 <code>a</code> 是该对象的一个引用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">a.append(1)</span><br></pre></td></tr></tbody></table></figure><p>在 Python 中，「变量」更准确叫法是「名字」，赋值操作 <code>=</code> 就是把一个名字<strong>绑定</strong>到一个对象上。就像给对象添加一个标签。例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/python/python函数传值还是传/640.webp" alt="img"></p><p>整数 1 赋值给变量 a 就相当于是在整数1上绑定了一个 a 标签。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 2</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/python/python函数传值还是传/640.webp" alt="img"></p><p>整数 2 赋值给变量 a，相当于把原来整数 1 身上的 a 标签撕掉，贴到整数 2 身上。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = a</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/python/python函数传值还是传/640.webp" alt="img"></p><p>把变量 a 赋值给另外一个变量 b，相当于在对象 2 上贴了 a，b 两个标签，通过这两个变量都可以对对象 2 进行操作。</p><p>变量本身没有类型信息，类型信息存储在对象中，这和C/C++中的变量有非常大的出入（C中的变量是一段内存区域）</p><h1 id="3-函数参数"><a href="#3-函数参数" class="headerlink" title="3 函数参数"></a>3 函数参数</h1><p>Python 函数中，<strong>参数的传递本质上是一种赋值操作</strong>，而赋值操作是一种名字到对象的绑定过程，清楚了赋值和参数传递的本质之后，现在再来分析前面两段代码。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(arg):</span><br><span class="line">    arg = 2</span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line">a = 1</span><br><span class="line">foo(a)  # 输出：2</span><br><span class="line">print(a) # 输出：1</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/python/python函数传值还是传/640.webp" alt="img"></p><p>在代码段1中，变量 a 绑定了 1，调用函数 foo(a) 时，相当于给参数 arg 赋值 <code>arg=1</code>，这时两个变量都绑定了 1。在函数里面 arg 重新赋值为 2 之后，相当于把 1 上的 arg 标签撕掉，贴到 2 身上，而 1 上的另外一个标签 a 一直存在。因此 print(a) 还是 1。</p><p>再来看一下代码段2</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def bar(args):</span><br><span class="line">    args.append(1)</span><br><span class="line"></span><br><span class="line">b = []</span><br><span class="line">print(b)#　输出：[]</span><br><span class="line">print(id(b)) # 输出：4324106952</span><br><span class="line">bar(b)</span><br><span class="line">print(b) ＃　输出：[1]</span><br><span class="line">print(id(b))  # 输出：4324106952</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/python/python函数传值还是传/640-1563088909645.webp" alt="img"></p><p>执行 append 方法前 b 和 arg 都指向（绑定）同一个对象，执行 append 方法时，并没有重新赋值操作，也就没有新的绑定过程，append 方法只是对列表对象插入一个元素，对象还是那个对象，只是对象里面的内容变了。因为 b 和 arg 都是绑定在同一个对象上，执行 b.append 或者 arg.append 方法本质上都是对同一个对象进行操作，因此 b 的内容在调用函数后发生了变化（但id没有变，还是原来那个对象）</p><p>最后，回到问题本身，究竟是是传值还是传引用呢？说传值或者传引用都不准确。非要安一个确切的叫法的话，<strong>叫传对象（call by object）</strong>。如果作为面试官，非要考察候选人对 Python 函数参数传递掌握与否，与其讨论字面上的意思，还不如来点实际代码。</p><h1 id="4-show-me-the-code"><a href="#4-show-me-the-code" class="headerlink" title="4 show me the code"></a>4 show me the code</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def bad_append(new_item, a_list=[]):</span><br><span class="line">    a_list.append(new_item)</span><br><span class="line">    return a_list</span><br></pre></td></tr></tbody></table></figure><p>这段代码是初学者最容易犯的错误，用可变(mutable)对象作为参数的默认值。函数定义好之后，默认参数 <code>a_list</code> 就会指向（绑定）到一个空列表对象，每次调用函数时，都是对同一个对象进行 append 操作。因此这样写就会有潜在的bug，同样的调用方式返回了不一样的结果。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">>>> print bad_append('one')</span><br><span class="line">['one']</span><br><span class="line">>>> print bad_append('one')</span><br><span class="line">['one', 'one']</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/python/python函数传值还是传/640.webp" alt="img"></p><p>而正确的方式是，把参数默认值指定为None</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def good_append(new_item, a_list=None):</span><br><span class="line">    if a_list is None:</span><br><span class="line">        a_list = []</span><br><span class="line">    a_list.append(new_item)</span><br><span class="line">    return a_list</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/python/python函数传值还是传/640-1563088909647.webp" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python变量与赋值</title>
      <link href="/2019/python/python%E5%8F%98%E9%87%8F%E4%B8%8E%E8%B5%8B%E5%80%BC"/>
      <url>/2019/python/python%E5%8F%98%E9%87%8F%E4%B8%8E%E8%B5%8B%E5%80%BC</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>Python是一门独特的语言，与C语言有很大区别。</p><a id="more"></a><h1 id="2-在c语言中"><a href="#2-在c语言中" class="headerlink" title="2 在c语言中"></a>2 在c语言中</h1><p>在C语言中给变量赋值时，需要先指定数据类型，同时会开辟一块内存区域，用于存储值，例如</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/python/python变量与赋/640.webp" alt="img"></p><p>a 就是内存空间中的一小块区域，就像是一个大房间里面的一个小盒子，赋值就是把整数1装载到盒子里面。</p><p>现在给变量a重新赋值</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 2;</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/python/python变量与赋/640-1563087112884.webp" alt="img"></p><p>盒子依然是那个盒子，也就是说内存地址没有变，只是该段内存中的值变了，变成了2。</p><p>再来看：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int b = a;</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/python/python变量与赋/640-1563087147201.webp" alt="img"></p><p>当把变量a赋值给另外一个变量b时，相当于把值拷贝了一份传递给变量b，b是新开辟的一段内存区域。</p><h1 id="3-在python中"><a href="#3-在python中" class="headerlink" title="3 在python中"></a>3 在python中</h1><p>在Python中，“变量”的严格叫法是“名字(name)”，也可以理解为标签，就像人的姓名一样，名字就是挂在人身上的一个标签。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">>>> 10-a</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "<stdin>", line 1, in <module></module></stdin></span><br><span class="line">NameError: name 'a' is not defined</span><br></pre></td></tr></tbody></table></figure><p>比如上面这段错误报的是name ‘a’ 没有定义，而没有说成 variable。</p><p>在Python中，给变量赋值就是相当于给对象贴标签，就像给人取名字一样，变量本身是没有任何意义的，它没有类型信息，真正的信息都在对象身上。</p><p>例如:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/python/python变量与赋/640-1563087305619.webp" alt="img"></p><p>Python内部首先会分配一段内存空间用于创建整数对象1，然后给这个1贴上名为a的标签。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=2</span><br></pre></td></tr></tbody></table></figure><p>Python接着会在另一块内存区域创建整数对象2，然后把标签a从1身上撕下来贴在2身上，此时，我们没法再通过a来得到1这个值了。</p><p><img src="/2019/python/python变量与赋/640-1563087340602.webp" alt="img"></p><p>现在把名字a赋值给另外一个名字b</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b=a</span><br></pre></td></tr></tbody></table></figure><p>相当于在刚才的2身上又贴了一个新的标签b，注意，这里和C语言是完全不一样的，定义b的时候不需要分配内存空间，这样我们既可以通过a来访问2也可以通过b来访问2，访问的都是同一个对象，就好比我们给宝宝取名时既有小名也有大名，其实叫的都是同一个人。</p><p>虽然我们通常在Python中还是用”变量”的叫法（因为在编程语言中这是一种通用叫法），但是我们需要理解Python中的变量不同于其他语言，变量只是一个名字。    </p><h1 id="4-函数的参数传递"><a href="#4-函数的参数传递" class="headerlink" title="4 函数的参数传递"></a>4 函数的参数传递</h1><p>理解了Python中的变量与赋值后，再来看函数的参数传递，如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">>>> def fun_a(a):</span><br><span class="line">...     a = a+4</span><br><span class="line">...</span><br><span class="line">>>> g = 0</span><br><span class="line">>>> fun_a(g)</span><br><span class="line">>>> g</span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure><p>全局变量g传递给函数fun_a时，相当于函数中的参数a也将作为标签贴在0上，随后a被重新赋值了(a=a+4)，相当于从0撕下标签a贴到4身上，然后g依然还是0上面的标签。</p><p><img src="/2019/python/python变量与赋/640-1563087509657.webp" alt="img"></p><p>再来看这个函数，传递的是一个列表对象</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">>>> def fun_b(names):...     names[0] = ['x', 'y']...>>> n_list = ['a','b','c']>>> fun_b(n_list)>>>>>> n_list[['x','y'], 'b', 'c']</span><br></pre></td></tr></tbody></table></figure><p>与前面的步骤还是一样的，names 和 n_list 都是[‘a’,’b’,’c’]上的一个标签，只是列表中的第0个元素被重新赋值了，但是names和 n_list 依然都贴在这个列表对象身上，虽然 n_list的值更新了，但对象依然是原来那个对象。就好比张三和小张都是同一个人，现在给小张换件衣服时，其实就是给张三换件衣服，人还是那个人，只是它身上的东西发生了变化。</p><p><img src="/2019/python/python变量与赋/640-1563087509692.webp" alt="img"></p><h1 id="5-变量命名规则"><a href="#5-变量命名规则" class="headerlink" title="5 变量命名规则"></a>5 变量命名规则</h1><p>python对字母大小写敏感。在变量命名中尽量使用小写命名。</p><p>规则：</p><ol><li>变量名只能包含数字、字母和下划线。变量名可以以字母或下划线打头，但是不能以数字开头。</li><li>变量名不能包括空格，但是可以使用下划线来分割其中的单词。</li><li>不能使用python关键字和函数名来作为变量名。</li><li>变量名应该短而具有描述性。</li></ol><h1 id="6-python的关键字和内置函数"><a href="#6-python的关键字和内置函数" class="headerlink" title="6 python的关键字和内置函数"></a>6 python的关键字和内置函数</h1><p><img src="/2019/python/python变量与赋/1563105729632.png" alt="1563105729632"></p><p>python关键字可以通过python程序查看。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword <span class="comment">#导入keyword模块</span></span><br><span class="line">print(keyword.kwlist)</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'async'</span>, <span class="string">'await'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></tbody></table></figure><p>python的内置函数：</p><p><img src="/2019/python/python变量与赋/1563105958549.png" alt="1563105958549"></p><p>参考：</p><p><a href="https://blog.csdn.net/alice_tl/article/details/80867196" target="_blank" rel="noopener">Python内置函数作用及解析</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符编码</title>
      <link href="/2019/python/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81"/>
      <url>/2019/python/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>Python 开发中经常遇到编码错误，如：UnicodeDecodeError、UnicodeEncodeError，本文从字符编码的起源开始，讲述编程中应该如何应对编码的问题。</p><h1 id="2-什么是编码"><a href="#2-什么是编码" class="headerlink" title="2 什么是编码"></a>2 什么是编码</h1><p>字节：计算机存储的一切数据，文本字符、图片、视频、音频、软件都是由一串01的字节序列构成的，一个字节等于8个比特位。</p><p>字符：字符就是一个符号，比如一个汉字、一个英文字母、一个数字、一个标点都可以称为一个字符。</p><p><strong>编码(encode)是把数据从一种形式转换为另外一种形式的过程，它是一套算法，比如这里的字符 A 转换成 01000001 就是一次编码的过程，解码(decode)就是编码的逆过程。本文是关于字符的编码，是字符和二进制数据（字节）之间转换的算法。</strong></p><p><img src="/2019/python/字符编/gitchat-encode-decode.jpg" alt="gitchat-encode-decode.jpg"></p><p>字节方便存储和网络传输，而字符用于显示，方便阅读。字符 “p” 保存到硬盘就是一串二进制数据 <code>01110000</code>，占用一个字节的长度        </p><p>我们用编辑器打开的文本，看到的一个个字符，最终保存在磁盘的时候都是以二进制字节序列形式存起来的。那么从字符到字节的转换过程就叫做编码（encode），反过来叫做解码（decode），两者是一个可逆的过程。编码是为了存储传输，解码是为了方便显示阅读。</p><h1 id="3-什么是字符集"><a href="#3-什么是字符集" class="headerlink" title="3 什么是字符集"></a>3 什么是字符集</h1><p>字符集是一个系统支持的所有抽象字符的集合。它是各种文字和符号的总称，常见的字符集种类包括 ASCII 字符集、GBK 字符集、Unicode字符集等。不同的字符集规定了有限个字符，比如：ASCII 字符集只含有拉丁文字字母，GBK 包含了汉字，而 Unicode 字符集包含了世界上所有的文字符号。</p><h2 id="3-1-ASCII-字符集与字符编码的起源"><a href="#3-1-ASCII-字符集与字符编码的起源" class="headerlink" title="3.1 ASCII:字符集与字符编码的起源"></a>3.1 ASCII:字符集与字符编码的起源</h2><p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码），一共规定了 128 个字符及对应的二进制转换关系，128 个字符包括了可显示的26个字母（大小写）、10个数字、标点符号以及特殊的控制符，也就是英语与西欧语言中常见的字符，这128个字符用一个字节来表示绰绰有余，因为一个字节可以表示256个字符，所以当前只利用了字节的7位，最高位用来当作奇偶校验。如字符小写 a 对应 01100001，大写 A 对应 01000001。</p><p>ASCII 字符集是字母、数字、标点符号以及控制符（回车、换行、退格）等组成的128个字符。</p><p><img src="/2019/python/字符编/1563023054552.png" alt="1563023054552"></p><p>ASCII 字符编码是将这128个字符转换为计算机可识别的二进制数据的一套规则（算法）。</p><p>因此，<strong>字符集和字符编码的关系</strong>：通常来说，字符集同时定义了一套同名的字符编码规则，例如 ASCII 就定义了字符集以及字符编码。但是不是绝对， Unicode 就只定义了字符集，而对应的字符编码是 UTF-8，UTF-16。</p><p>通俗讲：字符集为每一个字符分配一个数字序号。例如在ASCII字符集中，字符A被分配成65号，那就是说A的编码值code point是65。而字符编码就是如何将编码值变成二进制计算机可以识别的形式。</p><h2 id="3-2-EASCII-扩展的ASCII"><a href="#3-2-EASCII-扩展的ASCII" class="headerlink" title="3.2 EASCII:扩展的ASCII"></a>3.2 EASCII:扩展的ASCII</h2><p>随着计算机的不断普及，计算机开始被西欧等国家使用，然后西欧语言中还有很多字符不在 ASCII 字符集中。因为 ASCII 只使用了字节的前 7 位，如果把第八位也利用起来，那么可表示的字符个数就是 256。这就是后来的 EASCII（Extended ASCII，延伸美国标准信息交换码），EASCII 码比 ASCII 码扩充出来的符号包括表格符号、计算符号、希腊字母和特殊的拉丁符号。</p><h2 id="3-3-GB2312和GBK-满足国人需求的字符集"><a href="#3-3-GB2312和GBK-满足国人需求的字符集" class="headerlink" title="3.3 GB2312和GBK:满足国人需求的字符集"></a>3.3 GB2312和GBK:满足国人需求的字符集</h2><p>计算机开始普及到了中国，但面临的一个问题就是字符，汉字博大精深，常用汉字有3500个，已经大大超出了 ASCII 字符集所能表示的字符范围了，即使是 EASCII 也显得杯水车薪，1981 年国家标准化管理委员会定了一套字符集叫 GB2312，每个汉字符号由两个字节组成，理论上它可以表示65536个字符，不过它只收录了7445个字符，6763个汉字和682个其他字符，同时它能够兼容 ASCII，ASCII 中定义的字符只占用一个字节的空间。</p><p>GB2312 所收录的汉字已经覆盖中国大陆99.75%的使用频率，但是对一些罕见的字和繁体字还有很多少数民族使用的字符都没法处理，于是后来就在 GB2312 的基础上创建了一种叫 GBK 的字符编码，GBK 不仅收录了27484 个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。GBK 是利用了 GB2312 中未被使用的编码空间上进行扩充，所以它能完全兼容 GB2312和 ASCII。而 GB 18030 是现时最新的字符集，兼容 GB 2312-1980 和 GBK， 共收录汉字70244个，采用多字节编码，每个字符可以有1、2、4个字节组成，某种意义上它能容纳161 万个字符，包含繁体汉字以及日韩汉字，单字节与ASCII兼容，双字节与GBK标准兼容。</p><h2 id="3-4-Unicode-：统一江湖的字符集"><a href="#3-4-Unicode-：统一江湖的字符集" class="headerlink" title="3.4 Unicode ：统一江湖的字符集"></a>3.4 Unicode ：统一江湖的字符集</h2><p>尽管我们有了属于自己的字符集和字符编码 GBK，可世界上还有很多国家拥有自己的语言和文字，比如日本用 JIS，台湾用 BIG5，不同国家之间交流起来就很困难，因为没有统一的编码标准，可能同一个字符，在A国家用两字字节存储，而到了B国家是3个字节，这样很容易出现编码问题，于是在 1991 年，国际标准化组织和统一码联盟组织各自开发了 ISO/IEC 10646（USC）和 Unicode 项目，这两个项目的目的都是希望用一种字符集来统一全世界所有字符，不过很快双方都意识到世界上并不需要两个不兼容的字符集。于是他们就编码问题进行了非常友好地会晤，决定彼此把工作内容合并，虽然项目还是独立存在，各自发布各自的标准，但前提是两者必须保持兼容。不过由于 Unicode 这一名字比较好记，因而它使用更为广泛，成为了事实上的统一编码标准。</p><p>Unicode 是一个囊括了世界上所有字符的字符集，其中每一个字符都对应有<strong>唯一的编码值（code point）</strong>，注意了：<strong>它不是字符编码，仅仅是字符集而已，Unicode 字符如何进行编码，可以是 UTF-8、UTF-16、甚至用 GBK 来编码</strong>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">注：在python2环境下：</span><br><span class="line">>>> a = u"好"</span><br><span class="line">>>> a </span><br><span class="line">u'\u597d'      </span><br><span class="line">>>> b = a.encode("utf-8")</span><br><span class="line">>>> b</span><br><span class="line">'\xe5\xa5\xbd'  </span><br><span class="line">>>></span><br><span class="line"></span><br><span class="line">>>> b = a.encode("gbk")</span><br><span class="line">>>> b</span><br><span class="line">'\xba\xc3'</span><br></pre></td></tr></tbody></table></figure><p>Unicode 本身并没有规定一个字符究竟是用一个还是三个或者四个字节表示。Unicode 只规定了每个字符对应到唯一的代码值（code point），代码值 从 0000 ~ 10FFFF 共 1114112 个值 ，真正存储的时候需要多少个字节是由具体的编码格式决定的。比如：字符 「A」用 UTF-8 的格式编码来存储就只占用1个字节，用 UTF-16 就占用2个字节，而用 UTF-32 存储就占用4个字节。</p><h3 id="3-4-1-UTF-8：Unicode编码"><a href="#3-4-1-UTF-8：Unicode编码" class="headerlink" title="3.4.1 UTF-8：Unicode编码"></a>3.4.1 UTF-8：Unicode编码</h3><p>UTF（ Unicode Transformation Format）编码 和 USC（Universal Coded Character Set） 编码分别是 Unicode 、ISO/IEC 10646 编码体系里面两种编码方式，UCS 分为 UCS-2 和 UCS-4，而 UTF 常见的种类有 UTF-8、UTF-16、UTF-32。因为 Unicode 与 USC 两种字符集是相互兼容的，所以这几种编码格式也有着对应的等值关系</p><p>UCS-2 使用两个定长的字节来表示一个字符，UTF-16 也是使用两个字节，不过 UTF-16 是变长的（网上很多错误的说法说 UTF-16是定长的），遇到两个字节没法表示时，会用4个字节来表示，因此 UTF-16 可以看作是在 UCS-2 的基础上扩展而来的。而 UTF-32 与 USC-4 是完全等价的，使用4个字节表示，显然，这种方式浪费的空间比较多。</p><p>UTF-8 的优势是：它以单字节为单位用 1~4 个字节来表示一个字符，从首字节就可以判断一个字符的UTF-8编码有几个字节。如果首字节以0开头，肯定是单字节编码，如果以110开头，肯定是双字节编码，如果是1110开头，肯定是三字节编码，以此类推。除了单字节外，多字节UTF-8码的后续字节均以10开头。</p><p>1～4 字节的 UTF-8 编码看起来是这样的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0xxxxxxx</span><br><span class="line">110xxxxx 10xxxxxx</span><br><span class="line">1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></tbody></table></figure><ul><li>单字节可编码的 Unicode 范围：\u0000<del>\u007F（0</del>127）</li><li>双字节可编码的 Unicode 范围：\u0080<del>\u07FF（128</del>2047）</li><li>三字节可编码的 Unicode 范围：\u0800<del>\uFFFF（2048</del>65535）</li><li>四字节可编码的 Unicode 范围：\u10000<del>\u1FFFFF（65536</del>2097151）</li></ul><p>UTF-8 兼容了 ASCII，在数据传输和存储过程中节省了空间，其二是UTF-8 不需要考虑大小端问题。这两点都是 UTF-16 的劣势。不过对于中文字符，用 UTF-8 就要用3个字节，而 UTF-16 只需2个字节。而UTF-16 的优点是在计算字符串长度，执行索引操作时速度会很快。Java 内部使用 UTF-16 编码方案。而 Python3 使用 UTF-8。UTF-8 编码在互联网领域应用更加广泛。</p><p>来看一张图，下图是Windows平台保存文件时可选择的字符编码类型，你可以指定系统以什么样的编码格式来存储文件，ANSI 是 ISO 8859-1的超集，之所以在 Windows下有 Unicode 编码这样一种说法，其实是 Windows 的一种错误表示方法，或许是因为历史原因一直沿用至今，其实它真正表示的是 UTF-16 编码，更具体一点是 UTF-16小端，什么是大端和小端呢？</p><p><img src="/2019/python/字符编/windows-encode.png" alt="windows-encode.png"></p><h3 id="3-4-2-大端与小端"><a href="#3-4-2-大端与小端" class="headerlink" title="3.4.2 大端与小端"></a>3.4.2 大端与小端</h3><p>大小端是数据在存储器中的存放顺序，大端模式，是指数据的高字节在前，保存在内存的低地址中，与人类的读写法一致，数据的低字节在后，保存在内存的高地址中，小端与之相反，小端模式，是指数据的高字节在后，保存在内存的高地址中，而数据的低字节在前，保存在内存的低地址中例如，十六进制数值 <code>0x1234567</code>的大端字节序和小端字节序的写法：</p><p><img src="/2019/python/字符编/bg2016112201.gif" alt="bigendian"></p><p>至于为什么会有大端和小端之分呢？对于 16 位或者 32 位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如何将多个字节排放的问题，因为不同操作系统读取多字节的顺序不一样，，x86和一般的OS（如windows，FreeBSD,Linux）使用的是小端模式。但比如Mac OS是大端模式。因此就导致了大端存储模式和小端存储模式的存在，两者并没有孰优孰劣。</p><p>为什么UTF-8不需要考虑大小端问题？</p><p>UTF-8 的编码单元是1个字节，所以就不用考虑字节序问题。而 UTF-16 是用 2个字节来编码 Unicode 字符，编码单位是两个字节，因此需要考虑字节序问题，因为2个字节哪个存高位哪个存低位需要确定。</p><h1 id="4-Python2-中的字符编码"><a href="#4-Python2-中的字符编码" class="headerlink" title="4 Python2 中的字符编码"></a>4 Python2 中的字符编码</h1><p>Python 的诞生时间比 Unicode 还要早几年，所以，Python的第一个版本一直延续Python2.7，Python 的默认编码都是 ASCII。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">>>> import sys</span><br><span class="line">>>> sys.getdefaultencoding()</span><br><span class="line">'ascii'</span><br></pre></td></tr></tbody></table></figure><p>所以在 Python 源代码，要能够正常保存中文字符就必须先指定utf-8 或者 gbk 格式</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line">或者是：</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></tbody></table></figure><h2 id="4-1-str与unicode"><a href="#4-1-str与unicode" class="headerlink" title="4.1 str与unicode"></a>4.1 str与unicode</h2><p>字符和字节的区别，字符就是一个符号，比如一个汉字、一个字母、一个数字、一个标点都可以称为一个字符，而字节就是字符就是编码之后转换而成的二进制序列，一个字节是8个比特位。例如字符 “p” 存储到硬盘是一串二进制数据 01110000，占用一个字节。字节方便存储和网络传输，而字符用于显示方便阅读。</p><p>在Python2中，字符与字节的表示很微妙，两者的界限很模糊，Python2 中把字符串分为 <code>unicode</code>和 <code>str</code>两种类型。本质上<code>str</code>类型是<strong>二进制字节序列</strong>， <code>unicode</code>类型的字符串是字符，下面的示例代码可以看出 <code>str</code> 类型的 <strong>“禅”</strong> 打印出来是十六进制的<code>\xec\xf8</code>，对应的二进制字节序列就是<code>11101100 11111000</code>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">>>> s = '禅'</span><br><span class="line">>>> s</span><br><span class="line">'\xec\xf8'</span><br><span class="line">>>> type(s)</span><br><span class="line"><type 'str'></type></span><br></pre></td></tr></tbody></table></figure><p>而 unicode 类型的 u”禅” 对应的 unicode 符号是 u’\u7985’</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">>>> u = u"禅"</span><br><span class="line">>>> u</span><br><span class="line">u'\u7985'</span><br><span class="line">>>> type(u)</span><br><span class="line"><type 'unicode'></type></span><br></pre></td></tr></tbody></table></figure><p>我们要把 unicode 字符保存到文件或者传输到网络就需要经过编码处理转换成二进制形式的 str 类型，于是 python 的字符串提供了 encode 方法，从 unicode 转换到 str，反之亦然。</p><p><img src="/2019/python/字符编/python2-str21.jpg" alt="python2-str"></p><p>encode:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">>>> u = u"禅"</span><br><span class="line">>>> u</span><br><span class="line">u'\u7985'</span><br><span class="line">>>> u.encode("utf-8")</span><br><span class="line">'\xe7\xa6\x85'</span><br></pre></td></tr></tbody></table></figure><p>decode:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">>>> s = "禅"</span><br><span class="line">>>> s.decode("utf-8")</span><br><span class="line">u'\u7985'</span><br><span class="line">>>></span><br></pre></td></tr></tbody></table></figure><p>记住 str 本质上其实是一串二进制数据，而 unicode 是字符（符号）。编码（encode）就是把字符（符号）转换为 二进制数据的过程，因此 unicode 到 str 的转换要用 encode 方法，反过来就是用 decode 方法。</p><p><strong>encoding always takes a Unicode string and returns a bytes sequence, and decoding always takes a bytes sequence and returns a Unicode string”.</strong></p><h2 id="4-2-UnicodeEncodeError"><a href="#4-2-UnicodeEncodeError" class="headerlink" title="4.2 UnicodeEncodeError"></a>4.2 UnicodeEncodeError</h2><p>UnicodeEncodeError 发生在 unicode 字符串转换成 str 字节序列的时候，来看一个例子，把一串 unicode 字符串保存到文件</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">u'Python之禅'</span></span><br><span class="line">    f = open(<span class="string">"output.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">    f.write(name)</span><br></pre></td></tr></tbody></table></figure><p>错误日志</p><blockquote><p>UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 6-7: ordinal not in range(128)</p></blockquote><p>为什么会出现 UnicodeEncodeError？</p><p>因为调用 write 方法时，程序会把字符经过编码转换成二进制字节序列，内部会有 unicode 到 str 的编码转换过程，程序会先判断字符串是什么类型，如果是 str，就直接写入文件，不需要编码，因为 str 类型的字符串本身就是一串二进制的字节序列了。如果字符串是 unicode 类型，那么它会先调用 encode 方法把 unicode 字符串转换成二进制形式的 str 类型，才保存到文件，而 Python2中，encode 方法默认使用 ascii 进行 encde.</p><p>相当于：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">>>> </span><span class="string">u"Python之禅"</span>.encode(<span class="string">"ascii"</span>)</span><br></pre></td></tr></tbody></table></figure><p>但是，我们知道 ASCII 字符集中只包含了128个拉丁字母，不包括中文字符，因此 出现了 ‘ascii’ codec can’t encode characters 的错误。要正确地使用 encode ，就必须指定一个包含了中文字符的字符集，比如：UTF-8、GBK。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">>>> </span><span class="string">u"Python之禅"</span>.encode(<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="string">'Python\xe4\xb9\x8b\xe7\xa6\x85'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">>>> </span><span class="string">u"Python之禅"</span>.encode(<span class="string">"gbk"</span>)</span><br><span class="line"><span class="string">'Python\xd6\xae\xec\xf8'</span></span><br></pre></td></tr></tbody></table></figure><p>所以要把 unicode 字符串正确地写入文件，就应该预先把字符串进行 UTF-8 或 GBK 编码转换。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">u'Python之禅'</span></span><br><span class="line">    name = name.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"output.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(name)</span><br></pre></td></tr></tbody></table></figure><p>或者直接写str类型的字符串</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'Python之禅'</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"output.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(name)</span><br></pre></td></tr></tbody></table></figure><p>当然，把 unicode 字符串正确地写入文件不止一种方式，但原理是一样的，这里不再介绍，把字符串写入数据库，传输到网络都是同样的原理</p><h2 id="4-3-UnicodeDecodeError"><a href="#4-3-UnicodeDecodeError" class="headerlink" title="4.3 UnicodeDecodeError"></a>4.3 UnicodeDecodeError</h2><p>UnicodeDecodeError 发生在 str 类型的字节序列解码成 unicode 类型的字符串时</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">>>> </span>a = <span class="string">u"禅"</span></span><br><span class="line"><span class="meta">>>> </span>a</span><br><span class="line"><span class="string">u'\u7985'</span></span><br><span class="line"><span class="meta">>>> </span>b = a.encode(<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="meta">>>> </span>b</span><br><span class="line"><span class="string">'\xe7\xa6\x85'</span></span><br><span class="line"><span class="meta">>>> </span>b.decode(<span class="string">"gbk"</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"<stdin>"</stdin></span>, line <span class="number">1</span>, <span class="keyword">in</span> <module></module></span><br><span class="line">UnicodeDecodeError: <span class="string">'gbk'</span> codec can<span class="string">'t decode byte 0x85 in position 2: incomplete multibyte sequence</span></span><br></pre></td></tr></tbody></table></figure><p>把一个经过 UTF-8 编码后生成的字节序列 ‘\xe7\xa6\x85’ 再用 GBK 解码转换成 unicode 字符串时，出现 UnicodeDecodeError，因为 （对于中文字符）GBK 编码只占用两个字节，而 UTF-8 占用3个字节，用 GBK 转换时，还多出一个字节，因此它没法解析。避免 UnicodeDecodeError 的关键是保持 编码和解码时用的编码类型一致。</p><p>再举一个 UnicodeDecodeError 的例子</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">>>> </span>x = <span class="string">u"Python"</span></span><br><span class="line"><span class="meta">>>> </span>y = <span class="string">"之禅"</span></span><br><span class="line"><span class="meta">>>> </span>x + y</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"<stdin>"</stdin></span>, line <span class="number">1</span>, <span class="keyword">in</span> <module></module></span><br><span class="line">UnicodeDecodeError: <span class="string">'ascii'</span> codec can<span class="string">'t decode byte 0xe4 in position 0: ordinal not in range(128)</span></span><br><span class="line"><span class="string">>>></span></span><br></pre></td></tr></tbody></table></figure><p>str 与 unicode 字符串 执行 + 操作时，Python 会把 str 类型的字节序列隐式地转换成（解码）成 和 x 一样的 unicode 类型，但Python是使用默认的 ascii 编码来转换的，而 ASCII字符集中不包含有中文，所以报错了。相当于：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">>>> </span>y.decode(<span class="string">'ascii'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"<stdin>"</stdin></span>, line <span class="number">1</span>, <span class="keyword">in</span> <module></module></span><br><span class="line">UnicodeDecodeError: <span class="string">'ascii'</span> codec can<span class="string">'t decode byte 0xe4 in position 0: ordinal not in range(128)</span></span><br></pre></td></tr></tbody></table></figure><p>正确地方式应该是找到一种包含有中文字符的字符编码，比如 UTF-8或者 GBK 显示地把 y 进行解码转换成 unicode 类型</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">>>> </span>x = <span class="string">u"Python"</span></span><br><span class="line"><span class="meta">>>> </span>y = <span class="string">"之禅"</span></span><br><span class="line"><span class="meta">>>> </span>y = y.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="meta">>>> </span>x + y</span><br><span class="line"><span class="string">u'Python\u4e4b\u7985'</span></span><br></pre></td></tr></tbody></table></figure><h1 id="5-python3-中的字符编码"><a href="#5-python3-中的字符编码" class="headerlink" title="5 python3 中的字符编码"></a>5 python3 中的字符编码</h1><p>Python3对字符串和字符编码进行了很彻底的重构，完全不兼容Python2，同时也很多想迁移到Python3的项目带来了很大的麻烦，Python3 把系统默认编码设置为 UTF-8，字符和二进制字节序列区分得更清晰，分别用 str 和 bytes 表示。文本字符全部用 str 类型表示，str 能表示 Unicode 字符集中所有字符，而二进制字节数据用一种全新的数据类型，用 bytes 来表示，尽管Python2中也有bytes类型，但那只不过是str的一个别名。</p><h2 id="5-1-str"><a href="#5-1-str" class="headerlink" title="5.1 str"></a>5.1 str</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">>>> </span>a = <span class="string">"a"</span></span><br><span class="line"><span class="meta">>>> </span>a</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">>>> </span>type(a)</span><br><span class="line"><<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">>>> b = "禅"</span><br><span class="line"><span class="meta">>>> </span>b</span><br><span class="line"><span class="string">'禅'</span></span><br><span class="line"><span class="meta">>>> </span>type(b)</span><br><span class="line"><<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'></span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-2-bytes"><a href="#5-2-bytes" class="headerlink" title="5.2 bytes"></a>5.2 bytes</h2><p>Python3 中，在字符引号前加‘b’，明确表示这是一个 bytes 类型的对象，实际上它就是一组二进制字节序列组成的数据，bytes 类型可以是 ASCII范围内的字符和其它十六进制形式的字符数据，但不能用中文等非ASCII字符表示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">>>> </span>c = <span class="string">b'a'</span></span><br><span class="line"><span class="meta">>>> </span>c</span><br><span class="line"><span class="string">b'a'</span></span><br><span class="line"><span class="meta">>>> </span>type(c)</span><br><span class="line"><<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">>>> d = b'\xe7\xa6\x85'</span><br><span class="line"><span class="meta">>>> </span>d</span><br><span class="line"><span class="string">b'\xe7\xa6\x85'</span></span><br><span class="line"><span class="meta">>>> </span>type(d)</span><br><span class="line"><<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'></span></span><br><span class="line"><span class="class">>>></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">>>> e = b'禅'</span><br><span class="line">  File <span class="string">"<stdin>"</stdin></span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: bytes can only contain ASCII literal characters.</span><br></pre></td></tr></tbody></table></figure><p>bytes 类型提供的操作和 str 一样，支持分片、索引、基本数值运算等操作。但是 str 与 bytes 类型的数据不能执行 <code>+</code> 操作，尽管在python2中是可行的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">>>> b"a"+b"c"</span><br><span class="line">b'ac'</span><br><span class="line">>>> b"a"*2</span><br><span class="line">b'aa'</span><br><span class="line">>>> b"abcdef\xd6"[1:]</span><br><span class="line">b'bcdef\xd6'</span><br><span class="line">>>> b"abcdef\xd6"[-1]</span><br><span class="line">214</span><br><span class="line"></span><br><span class="line">>>> b"a" + "b"</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "<stdin>", line 1, in <module></module></stdin></span><br><span class="line">TypeError: can't concat bytes to str</span><br></pre></td></tr></tbody></table></figure><h2 id="5-3-python2-与-python3-字节与字符对比"><a href="#5-3-python2-与-python3-字节与字符对比" class="headerlink" title="5.3 python2 与 python3 字节与字符对比"></a>5.3 python2 与 python3 字节与字符对比</h2><table><thead><tr><th>python2</th><th>python3</th><th>表现</th><th>转换</th><th>作用</th></tr></thead><tbody><tr><td>str</td><td>bytes</td><td>字节</td><td>encode</td><td>存储</td></tr><tr><td>unicode</td><td>str</td><td>字符</td><td>decode</td><td>显示</td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>字符编码本质上是字符到字节的转换过程</li><li>字符集的演进过程是：ascii、eascii、ios8895-x，gb2312… Unicode</li><li>Unicode是字符集，对应的编码格式有UTF-8，UTF-16</li><li>字节序列存储的时候有大小端之分</li><li>python2中字符与字节分别用unicode和str类型表示</li><li>python3中字符与字节分别用str与bytes表示</li></ol><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://www.cnblogs.com/vipchenwei/p/6993788.html" target="_blank" rel="noopener">https://www.cnblogs.com/vipchenwei/p/6993788.html</a></p><p><a href="https://www.cnblogs.com/alex3714/articles/7550940.html" target="_blank" rel="noopener">python 之路，致那些年，我们依然没搞明白的编码</a></p><p><a href="https://www.cnblogs.com/davidwang456/p/7766956.html" target="_blank" rel="noopener">字符编码的前世今生</a></p><p><a href="https://www.cnblogs.com/delav/p/10074002.html" target="_blank" rel="noopener">关于字符编码：ascii、unicode与utf-8</a></p><p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode 和 UTF-8</a></p><p><a href="http://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener">编码转化工具</a></p><p><a href="https://www.cnblogs.com/csguo/p/7401874.html" target="_blank" rel="noopener">UniCode编码表</a></p><p><a href="https://www.cnblogs.com/work115/p/5924446.html" target="_blank" rel="noopener">https://www.cnblogs.com/work115/p/5924446.html</a></p><p><a href="https://www.cnblogs.com/ctztake/p/7230785.html" target="_blank" rel="noopener">https://www.cnblogs.com/ctztake/p/7230785.html</a></p><p>Python2.7中调用print打印var 变量时，操作系统会对var做一定的字符处理：如果var是str类型的变量，则直接将var变量交付给终端进行显示；如果var变量是unicode类型，则操作系统首先将var编码成str类型的对象（编码格式取决于stdout的编码格式），然后再交由终端进行显示。在终端显示时，如果str类型的变量的编码方式和终端设置的编码方式不一致，很可能会出现乱码问题。</p><p>str和unicode 转换: str  -> decode(‘the_coding_of_str‘) -> unicode unicode -> encode(‘the_coding_you_want‘) -> str </p><p>注意：python3字符串默认都是以unicode编码的，print打印时，变量只接受unicode类型，否则不能正常打印，这与python2不同。 </p><p>python (“打印”，”0001:002”)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端</title>
      <link href="/2019/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF"/>
      <url>/2019/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>​    编程就是跟数据打交道，我们需要处理数据，存储数据，展示数据。什么是前端，为什么学前端。</p><a id="more"></a><h1 id="2-web前端概述"><a href="#2-web前端概述" class="headerlink" title="2 web前端概述"></a>2 web前端概述</h1><p>​    web前端开发是从网页制作演变而来。在互联网的演化进程中，网页制作是Web 1.0时代的产物，早期网站主要内容都是静态，以图片和文字为主，用户使用网站的行为也以浏览为主。随着互联网技术的发展和HTML5、CSS3的应用，现代网页更加美观，交互效果显著，功能更加强大。</p><p>​    学习web前端开发基础技术需要掌握：HTML、CSS、JavaScript语言。</p><ol><li>HTML是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。</li><li>CSS样式是表现。比如标题字体、颜色变化或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。</li><li>JavaScript是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有焦点新闻（新闻图片）的轮换。可以这么理解，有动画的，有交互的一般都是用JavaScript来实现的。</li></ol><p><img src="/2019/前端/前/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%B8%89%E9%83%A8%E5%88%86.png" alt="前端基础三部分"></p><p><img src="/2019/前端/前/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9.png" alt="前端基础内容"></p><h1 id="3-web服务本质"><a href="#3-web服务本质" class="headerlink" title="3 web服务本质"></a>3 web服务本质</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django基本流程</title>
      <link href="/2019/django/Django%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B"/>
      <url>/2019/django/Django%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B</url>
      
        <content type="html"><![CDATA[<h1 id="1-设计表结构"><a href="#1-设计表结构" class="headerlink" title="1 设计表结构"></a>1 设计表结构</h1><p><img src="/2019/django/Django基本流/1562133052512.png" alt="1562133052512"></p><p>注：mysql的安装与使用 </p><a id="more"></a><h1 id="2-配置数据库"><a href="#2-配置数据库" class="headerlink" title="2 配置数据库"></a>2 配置数据库</h1><h2 id="2-1-默认SQLite数据库"><a href="#2-1-默认SQLite数据库" class="headerlink" title="2.1 默认SQLite数据库"></a>2.1 默认SQLite数据库</h2><p>打开<code>mysite/settings.py</code>配置文件，这是整个Django项目的设置中心。Django默认使用SQLite数据库，因为Python源生支持SQLite数据库，所以你无须安装任何程序，就可以直接使用它。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.2/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = {</span><br><span class="line">    <span class="string">'default'</span>: {</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果你想使用其他的数据库，请先安装相应的数据库操作模块，并将settings文件中DATABASES位置的<code>’default’</code>的键值进行相应的修改，用于连接你的数据库。其中：</p><ul><li>ENGINE（引擎）：可以是<code>django.db.backends.sqlite3</code>、<code>django.db.backends.postgresql</code>、<code>django.db.backends.mysql</code>、<code>django.db.backends.oracle</code>，当然其它的也行。</li><li>NAME（名称）：类似Mysql数据库管理系统中用于保存项目内容的数据库的名字。如果你使用的是默认的SQLite，那么数据库将作为一个文件将存放在你的本地机器内，此时的NAME应该是这个文件的完整绝对路径包括文件名，默认值<code>os.path.join(BASE_DIR, ’db.sqlite3’)</code>，将把该文件储存在你的项目目录下。</li></ul><h2 id="2-2-更换其他数据库"><a href="#2-2-更换其他数据库" class="headerlink" title="2.2 更换其他数据库"></a>2.2 更换其他数据库</h2><p>注：如果你不是使用默认的SQLite数据库，那么一些诸如USER，PASSWORD和HOST的参数必须手动指定！mysql 示例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite/settings.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql         <span class="comment"># 一定要添加这两行！通过pip install pymysql！</span></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"><span class="comment">#因为Django连接MySQL时默认使用MySQLdb驱动，但MySQLdb不支持Python3，因此这里将MySQL</span></span><br><span class="line"><span class="comment">#驱动设置为pymysql。</span></span><br><span class="line"></span><br><span class="line">DATABASES = {</span><br><span class="line">    <span class="string">'default'</span>: {</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'mysite'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'192.168.1.1'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'pwd'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：</p><ul><li>在使用非SQLite的数据库时，请务必预先在数据库管理系统的提示符交互模式下创建数据库，你可以使用命令：<code>CREATE DATABASE database_name;</code> Django不会自动帮你做这一步工作。</li><li>确保你在settings文件中提供的数据库用户具有创建数据库表的权限，因为在接下来的教程中，我们需要自动创建一个test数据表。（在实际项目中也需要确认这一条要求。）</li><li>如果你使用的是SQLite，那么你无需做任何预先配置，直接使用就可以了。</li></ul><p><img src="/2019/django/Django基本流/1562133768975.png" alt="1562133768975"></p><h2 id="2-3-错误"><a href="#2-3-错误" class="headerlink" title="2.3 错误"></a>2.3 错误</h2><p>错误1：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">No module named 'MySQLdb'</span><br><span class="line"></span><br><span class="line">原因：python3连接MySQL不能再使用mysqldb，取而代之的是pymysql。</span><br><span class="line"></span><br><span class="line">解决方法：在python的MySQL包中，即路径：C:\Users\adong\AppData\Local\Programs\Python\Python36\Lib\site-packages\Django-2.0.3-py3.6.egg\django\db\backends\mysql</span><br><span class="line">下的__init__.py文件中加入：</span><br><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></tbody></table></figure><p>错误2：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.3 or newer is required; you have 0.7.11.None</span><br><span class="line"></span><br><span class="line">原因：在解决了错误一以后出现了此错误。</span><br><span class="line"></span><br><span class="line">解决方法：在python的MySQL包中，即路径：C:\Users\adong\AppData\Local\Programs\Python\Python36\Lib\site-packages\Django-2.0.3-py3.6.egg\django\db\backends\mysql</span><br><span class="line">下的 base.py 文件中，注释掉一下两行代码：</span><br><span class="line"></span><br><span class="line">if version < (1, 3, 3):</span><br><span class="line">     raise ImproperlyConfigured("mysqlclient 1.3.3 or newer is required; you have %s" % Database.__version__)</span><br></pre></td></tr></tbody></table></figure><p>错误3：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3报错：Attribute Error:str object has no attribut edecode </span><br><span class="line">错误代码：query = query.encode(errors='replace')</span><br><span class="line">解决方法：把decode改为encode即可。</span><br></pre></td></tr></tbody></table></figure><h1 id="3-创建应用"><a href="#3-创建应用" class="headerlink" title="3 创建应用"></a>3 创建应用</h1><h2 id="3-1-命令创建"><a href="#3-1-命令创建" class="headerlink" title="3.1 命令创建"></a>3.1 命令创建</h2><p>在 Django 中，每一个应用（app）都是一个 Python 包，并且遵循着相同的约定。Django 自带一个工具，可以帮你生成应用的基础目录结构。</p><p>app应用与project项目的区别：</p><ul><li>一个app实现某个功能，比如博客、公共档案数据库或者简单的投票系统；</li><li>一个project是配置文件和多个app的集合，这些app组合成整个站点；</li><li>一个project可以包含多个app；</li><li>一个app可以属于多个project！</li></ul><p>app的存放位置可以是任何地点，但是通常都将它们放在与<code>manage.py</code>脚本同级的目录下，这样方便导入文件</p><p>进入mysite项目根目录，确保与<code>manage.py</code>文件处于同一级，输入下述命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp appname</span><br></pre></td></tr></tbody></table></figure><p>系统会自动生成 polls应用的目录，其结构如下：</p><p><img src="/2019/django/Django基本流/1562134753862.png" alt="1562134753862"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">appname/</span><br><span class="line">    __init__.py           ---说明app应用是一个包</span><br><span class="line">    admin.py              ---站点配置</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py             ---模型</span><br><span class="line">    tests.py</span><br><span class="line">    views.py              ---视图（url-->视图-->models取数据-->视图在将数据给模板）</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-pycharm中创建"><a href="#3-2-pycharm中创建" class="headerlink" title="3.2 pycharm中创建"></a>3.2 pycharm中创建</h2><p>在Pycharm中，没有可以创建app的图形化按钮，需要在下方的<code>Terminal</code>终端中输入命令：</p><p><code>python manage.py startapp appname</code></p><p><img src="/2019/django/Django基本流/87-2.png" alt="image"></p><p>通过前面在Pycharm中创建工程的方式有个方便之处，点击Terminal后，会自动进入虚拟环境。</p><p>注：如果没有进入venv环境，则执行语句报错！</p><p><img src="/2019/django/Django基本流/1562134621875.png" alt="1562134621875"></p><h1 id="4-激活应用"><a href="#4-激活应用" class="headerlink" title="4 激活应用"></a>4 激活应用</h1><p>在settings文件中顶部的<code>INSTALLED_APPS</code>设置项。它列出了所有的项目中被激活的Django应用（app）。你必须将你自定义的app注册在这里。每个应用可以被多个项目使用，并且可以打包和分发给其他人在他们的项目中使用。</p><p>默认情况，<code>INSTALLED_APPS</code>中会自动包含下列条目，它们都是Django自动生成的：</p><ul><li>django.contrib.admin：admin管理后台站点</li><li>django.contrib.auth：身份认证系统</li><li>django.contrib.contenttypes：内容类型框架</li><li>django.contrib.sessions：会话框架</li><li>django.contrib.messages：消息框架</li><li>django.contrib.staticfiles：静态文件管理框架 </li></ul><p>上面的一些应用也需要建立一些数据库表，所以在使用它们之前我们要在数据库中创建这些表，</p><p>migrate命令将遍历<code>INSTALLED_APPS</code>设置中的所有项目，在数据库中创建对应的表，并打印出每一条动作信息</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/django/Django基本流/1562135336496.png" alt="1562135336496"></p><h1 id="5-定义模型"><a href="#5-定义模型" class="headerlink" title="5 定义模型"></a>5 定义模型</h1><p>模型本质上就是数据库表的布局，再附加一些元数据。</p><p>Django通过自定义Python类的形式来定义具体的模型，每个模型的物理存在方式就是一个Python的类Class，每个模型代表数据库中的一张表，每个类的实例代表数据表中的一行数据，类中的每个变量代表数据表中的一列字段。Django通过模型，将Python代码和数据库操作结合起来，实现对SQL查询语言的封装。也就是说，你可以不会管理数据库，可以不会SQL语言，你同样能通过Python的代码进行数据库的操作。Django通过ORM对数据库进行操作，奉行代码优先的理念，将Python程序员和数据库管理员进行分工解耦。</p><p>现在编辑<code>myapp/models.py</code>文件</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p>注：</p><ol><li><p>首先要引入<code>from django.db import models</code>, 因为每一个类都是<code>django.db.models.Model</code>的子类。每一个字段都是<code>Field</code>类的一个实例。例如用于保存字符数据的CharField和用于保存时间类型的DateTimeField，它们告诉Django每一个字段保存的数据类型。</p></li><li><p>每一个Field实例的名字就是字段的名字（如： question_text 或者 pub_date ）。在你的Python代码中会使用这个值，你的数据库也会将这个值作为表的列名。</p></li><li><p>一些Field类必须提供某些特定的参数。例如CharField需要你指定max_length。这不仅是数据库结构的需要，同样也用于数据验证功能。</p></li><li><p>有必填参数，当然就会有可选参数，比如在votes里我们将其默认值设为0.</p></li><li><p>最后请注意，我们使用<code>ForeignKey</code>定义了一个外键关系。它告诉Django，每一个Choice关联到一个对应的Question（注意要将外键写在‘多’的一方）。Django支持通用的数据关系：一对一，多对一和多对多。</p></li></ol><p><img src="/2019/django/Django基本流/1562135831184.png" alt="1562135831184"></p><h1 id="6-在数据库中生成数据表"><a href="#6-在数据库中生成数据表" class="headerlink" title="6 在数据库中生成数据表"></a>6 在数据库中生成数据表</h1><p>需要做两步操作 生成迁移文件和执行迁移</p><p><img src="/2019/django/Django基本流/1562136281156.png" alt="1562136281156"></p><h2 id="6-1-makemigrations"><a href="#6-1-makemigrations" class="headerlink" title="6.1 makemigrations"></a>6.1 makemigrations</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></tbody></table></figure><p>通过运行<code>makemigrations</code>命令，Django 会检测你对模型文件的修改，也就是告诉Django你对模型有改动，并且你想把这些改动保存为一个“迁移(migration)”。</p><p><code>migrations</code>是Django保存模型修改记录的文件，这些文件保存在磁盘上。会在 migrations下生成一个0001_initial.py文件，面保存的都是人类可读并且可编辑的内容，方便随时手动修改。</p><p><img src="/2019/django/Django基本流/1562136416735.png" alt="1562136416735"></p><p><img src="/2019/django/Django基本流/1562141778180.png" alt="1562141778180"></p><p>在例子中，它就是<code>polls/migrations/0001_initial.py</code>，你可以打开它看看，里面保存的都是人类可读并且可编辑的内容，方便你随时手动修改。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注：</span><br><span class="line">通过执行python manage.py sqlmigrate appname 0001命令可以看到在migration的时候实际执行的SQL语句是什么。</span><br><span class="line">执行python manage.py check命令，它将检查项目中的错误，并不实际进行迁移或者链接数据库的操作</span><br></pre></td></tr></tbody></table></figure><h2 id="6-2-migrate"><a href="#6-2-migrate" class="headerlink" title="6.2 migrate"></a>6.2 migrate</h2><p>运行migrate命令，在数据库中进行真正的表操作了。</p><p><code>python manage.py migrate</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">use 数据库名称；</span><br><span class="line">show tables；</span><br><span class="line">select * from 表名；</span><br><span class="line">desc 表名；</span><br><span class="line">create database databasename；</span><br><span class="line">drop database databasename；</span><br></pre></td></tr></tbody></table></figure><p>migrate命令对所有还未实施的迁移记录进行操作，本质上就是将你对模型的修改体现到数据库中具体的表上面。Django通过一张叫做django_migrations的表，记录并跟踪已经实施的migrate动作，通过对比获得哪些migrations尚未提交。</p><p>migrations的功能非常强大，允许你随时修改你的模型，而不需要删除或者新建你的数据库或数据表，在不丢失数据的同时，实时动态更新数据库</p><p><strong>修改模型时的操作分三步</strong></p><ul><li>在models.py中修改模型；</li><li>运行<code>python manage.py makemigrations</code>为改动创建迁移记录；</li><li>运行<code>python manage.py migrate</code>，将操作同步到数据库。</li></ul><p>之所以要将创建和实施迁移的动作分成两个命令两步走是因为你也许要通过版本控制系统（例如github，svn）提交你的项目代码，如果没有一个中间过程的保存文件（migrations），那么github如何知道以及记录、同步、实施你所进行过的模型修改动作呢？毕竟，github不和数据库直接打交道，也没法和你本地的数据库通信。但是分开之后，你只需要将你的migration文件（例如上面的0001）上传到github，它就会知道一切。</p><h2 id="6-3-错误"><a href="#6-3-错误" class="headerlink" title="6.3 错误"></a>6.3 错误</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Django在根据models生成数据库表时报 init() missing 1 required positional argument: 'on_delete'</span><br><span class="line">解决办法:</span><br><span class="line">在django2.0后，定义外键和一对一关系的时候需要加on_delete选项，此参数为了避免两个表里的数据不一致问题，不然会报错：</span><br><span class="line">https://www.cnblogs.com/phyger/p/8035253.html</span><br></pre></td></tr></tbody></table></figure><h1 id="7-使用模型的API"><a href="#7-使用模型的API" class="headerlink" title="7 使用模型的API"></a>7 使用模型的API</h1><p>模型、数据库表、 数据库数据之间的使用。</p><p>注：一般是在view（视图）中使用，视图通过使用模型的api去获取数据，然后将数据传递给模板，模板经过渲染之后再浏览器进行显示。下面的测试使用python的shell环境进行测试。</p><h2 id="7-1-进入Python的shell"><a href="#7-1-进入Python的shell" class="headerlink" title="7.1 进入Python的shell"></a>7.1 进入Python的shell</h2><p>通过<code>python manage.py shell</code>进入Python的shell环境，相比较直接输入“python”命令的方式进入Python环境，调用<code>manage.py</code>参数能将<code>DJANGO_SETTINGS_MODULE</code>环境变量导入，它将自动按照<code>mysite/settings.py</code>中的设置，配置好你的python shell环境，这样，你就可以导入和调用任何你项目内的模块了。</p><h2 id="7-2-导入包"><a href="#7-2-导入包" class="headerlink" title="7.2 导入包"></a>7.2 导入包</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">>>>from myapp.models import Grades,Students #引入我们在模型中定义的类</span><br><span class="line">>>>from django.utils import timezone </span><br><span class="line">#Django推荐使用timezone.now()代替python内置的datetime.datetime.now()</span><br><span class="line"># 这个timezone就来自于Django的依赖库pytz</span><br><span class="line">>>>from datetime import * #导入 python自带的datetime模块</span><br></pre></td></tr></tbody></table></figure><h2 id="7-3-查询所有数据"><a href="#7-3-查询所有数据" class="headerlink" title="7.3 查询所有数据"></a>7.3 查询所有数据</h2><p>object是模型属性—用于模型对象和数据库交互 .</p><p>objects = Manager（） 是管理器类型的对象 ,是Model和数据库进行查询的接口。</p><p>定义在<code>from django.db import models</code>中用于模型对象和数据库交互是默认自动生成的属性，但我们是可以自定义管理器对象。</p><p>如果不自己定义，<code>objects=models.Manager()</code>查询类的属性时都是<code>类名.objects.方法</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">>>> Students.objects.all()</span><br><span class="line"><QuerySet []></QuerySet></span><br><span class="line">#现在系统中没有Students对象，数据库中没有数据</span><br></pre></td></tr></tbody></table></figure><h2 id="7-4-添加数据"><a href="#7-4-添加数据" class="headerlink" title="7.4 添加数据"></a>7.4 添加数据</h2><p><img src="/2019/django/Django基本流/1562145422874.png" alt="1562145422874"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">>>> grade1=Grades()</span><br><span class="line">>>> grade1.gname="python04"</span><br><span class="line">>>> grade1.gdate=datetime(year=2017,month=7,day=17)</span><br><span class="line">>>> grade1.ggirlnum=3</span><br><span class="line">>>> grade1.gboynum=70</span><br><span class="line">#必须调用save()函数才能在数据库中添加数据</span><br><span class="line">>>> grade1.save()</span><br></pre></td></tr></tbody></table></figure><p>添加数据后，再次进行查询：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">>>> Grades.objects.all()</span><br><span class="line"><QuerySet [<grades: grades object (1)>]></QuerySet></span><br></pre></td></tr></tbody></table></figure><p>上面的<code><QuerySet [<grades: grades object (1)>]></QuerySet></code>是一个不可读的内容展示，你无法从中获得任何直观的信息，为此我们需要一点小技巧，让Django在打印对象时显示一些我们指定的信息。</p><p>返回<code>myapp/models.py</code>文件，修改一下类，代码如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Grades(models.Model):</span><br><span class="line">    gname    = models.CharField(max_length=20)</span><br><span class="line">    gdate    = models.DateTimeField()</span><br><span class="line">    ggirlnum = models.IntegerField()</span><br><span class="line">    gboynum  = models.IntegerField()</span><br><span class="line">    isDelete = models.BooleanField(default=False)</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.gname</span><br></pre></td></tr></tbody></table></figure><p>退出shell 环境，然后重新进入，另需要重新导入模块：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">>>>from myapp.models import Grades,Students </span><br><span class="line">>>>from django.utils import timezone </span><br><span class="line">>>>from datetime import * </span><br><span class="line">>>>Grades.objects.all()</span><br><span class="line"><QuerySet [<grades: python04>]></QuerySet></span><br></pre></td></tr></tbody></table></figure><h2 id="7-5-查看对象"><a href="#7-5-查看对象" class="headerlink" title="7.5 查看对象"></a>7.5 查看对象</h2><p>Django提供了大量的关键字参数查询API</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> >>>Grades.objects.filter(id=1)</span><br><span class="line"><QuerySet [<grades: python04>]></QuerySet></span><br><span class="line"></span><br><span class="line">>>> Grades.objects.filter(gname='python04')</span><br><span class="line"><QuerySet [<grades: python04>]></QuerySet></span><br><span class="line"></span><br><span class="line">>>> Grades.objects.filter(gboynum=33)</span><br><span class="line"><QuerySet [<grades: python05>]></QuerySet></span><br><span class="line"></span><br><span class="line">>>> Grades.objects.filter(ggirlnum=3)</span><br><span class="line"><QuerySet [<grades: python04>, <Grades: python05>]></Grades:></QuerySet></span><br><span class="line"></span><br><span class="line"># 查询一个不存在的ID，会弹出异常</span><br><span class="line">>>> Grades.objects.get(id=3)</span><br><span class="line">myapp.models.Grades.DoesNotExist: Grades matching query does not exist.</span><br><span class="line"># Django为主键查询提供了一个缩写：pk。与Grades.objects.get(id=1)效果相同</span><br><span class="line">>>> Grades.objects.get(pk=1)</span><br><span class="line"><Grades: python04></Grades:></span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/django/Django基本流/1562151852163.png" alt="1562151852163">Django提供了大量的关键字参数查询API</p><p>pycharm中 .idea文件</p><h2 id="7-6-修改数据"><a href="#7-6-修改数据" class="headerlink" title="7.6 修改数据"></a>7.6 修改数据</h2><p>通过python的属性调用方式，访问模型字段的值</p><p>通过修改属性来修改字段的值，然后显式的调用save方法进行保存。</p><p><img src="/2019/django/Django基本流/1562151896833.png" alt="1562151896833"></p><h2 id="7-7-删除数据"><a href="#7-7-删除数据" class="headerlink" title="7.7 删除数据"></a>7.7 删除数据</h2><p><img src="/2019/django/Django基本流/1562152008621.png" alt="1562152008621"></p><h2 id="7-8-关联对象"><a href="#7-8-关联对象" class="headerlink" title="7.8 关联对象"></a>7.8 关联对象</h2><p><img src="/2019/django/Django基本流/1562201834269.png" alt="1562201834269"></p><p>获取关联对象的集合：</p><p>问题：如果表的关联很多，一环扣一环怎么办？</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">>>> stu2=Students(sname="jone",sage=30,scontend="我是jone",sgrade=grade1)</span><br><span class="line">>>> stu2.save()</span><br><span class="line">问题：如果关联不存在，怎么办？</span><br></pre></td></tr></tbody></table></figure><h1 id="8-启动服务器"><a href="#8-启动服务器" class="headerlink" title="8 启动服务器"></a>8 启动服务器</h1><p><img src="/2019/django/Django基本流/1562152242518.png" alt="1562152242518"></p><h1 id="9-admin站点管理"><a href="#9-admin站点管理" class="headerlink" title="9 admin站点管理"></a>9 admin站点管理</h1><p>​        很多时候，我们不光要开发针对客户使用的前端页面，还要给后台管理人员提供相应的管理界面。但是大多数时候为你的团队或客户编写用于增加、修改和删除内容的后台管理站点是一件非常乏味的工作并且没有多少创造性，而且也需要花不少的时间和精力。Django最大的优点之一，就是体贴的为你提供了一个基于项目model创建的一个后台管理站点admin。这个界面只给站点管理员使用，并不对大众开放。虽然admin的界面可能不是那么美观，功能不是那么强大，内容不一定符合你的要求，但是它是免费的、现成的，并且还是可定制的</p><p><img src="/2019/django/Django基本流/1562202339101.png" alt="1562202339101"></p><p>负责添加、修改、删除内容，内容指的是数据，数据库中的数据，通过可视化界面来修改数据。</p><p>公告访问：一般不需要</p><h2 id="9-1-配置Admin应用"><a href="#9-1-配置Admin应用" class="headerlink" title="9.1 配置Admin应用"></a>9.1 配置Admin应用</h2><p><img src="/2019/django/Django基本流/1562202449069.png" alt="1562202449069"></p><h2 id="9-2-创建管理员用户"><a href="#9-2-创建管理员用户" class="headerlink" title="9.2 创建管理员用户"></a>9.2 创建管理员用户</h2><ol><li>首先，我们需要通过下面的命令，创建一个可以登录admin站点的用户：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>输入用户名：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Username: admin</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>输入邮箱地址：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Email address: xxx@xxx.xxx</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>输入密码：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Password: **********</span><br><span class="line">Password (again): *********</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li><p>修改密码：</p><p><strong>方法一</strong></p><p>在Terminal中执行：python manage.py changepassword your_name（其中“your_name”为你要修改密码的用户名），根据提示内容修改即可。</p><p><strong>方法二</strong></p><p>进入shell环境，执行：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">u = User.objects.get(username=<span class="string">'your_name'</span>)</span><br><span class="line">u.set_password(<span class="string">'new_password'</span>)</span><br><span class="line">u.save()</span><br></pre></td></tr></tbody></table></figure><p><strong>比较</strong></p><p>方法一有密码强度验证，方法二不会校验密码强度</p></li></ol><h2 id="9-3-启动开发服务器"><a href="#9-3-启动开发服务器" class="headerlink" title="9.3 启动开发服务器"></a>9.3 启动开发服务器</h2><p>服务器启动后，在浏览器访问<code>http://127.0.0.1:8000/admin/</code>。你就能看到admin的登陆界面了：</p><p><img src="/2019/django/Django基本流/88-1.png" alt="image"></p><p>在实际环境中，为了站点的安全性，我们一般不能将管理后台的url随便暴露给他人，不能用<code>/admin/</code>这么简单的路径。</p><p>打开根url路由文件<code>mysite/urls.py</code>，修改其中admin.site.urls对应的表达式</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path('control/', admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>这样，我们必须访问<code>http://127.0.0.1:8000/control/</code>才能进入admin界面。</p><h2 id="9-4-汉化"><a href="#9-4-汉化" class="headerlink" title="9.4 汉化"></a>9.4 汉化</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = 'zh-Hans'</span><br><span class="line"></span><br><span class="line">TIME_ZONE = 'Asia/shanghai'</span><br><span class="line">#注：不需要重启服务，直接刷新页面就好</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/django/Django基本流/1562206077049.png" alt="1562206077049"></p><p>当前只有两个可编辑的内容：groups和users。它们是<code>django.contrib.auth</code>模块提供的身份认证框架。</p><h2 id="9-5-管理数据表"><a href="#9-5-管理数据表" class="headerlink" title="9.5 管理数据表"></a>9.5 管理数据表</h2><h3 id="9-5-1修改admin-py文件"><a href="#9-5-1修改admin-py文件" class="headerlink" title="9.5.1修改admin.py文件"></a>9.5.1修改admin.py文件</h3><p>在 app 中存在admin.py文件，进行修改。</p><ol><li>导入类（表）</li><li>进行注册</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Grades,Students</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line">admin.site.register(Grades)</span><br><span class="line">admin.site.register(Students)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/django/Django基本流/1562206550066.png" alt="1562206550066"></p><h3 id="9-5-2-自定义管理界面"><a href="#9-5-2-自定义管理界面" class="headerlink" title="9.5.2 自定义管理界面"></a>9.5.2 自定义管理界面</h3><p>点击进入 ，界面不友好，进行修改，则需要自定义管理界面：</p><p><img src="/2019/django/Django基本流/1562206707180.png" alt="1562206707180"></p><p><img src="/2019/django/Django基本流/1562206728468.png" alt="1562206728468"></p><h4 id="自定义管理界面步骤："><a href="#自定义管理界面步骤：" class="headerlink" title="自定义管理界面步骤："></a>自定义管理界面步骤：</h4><ol><li>定义类，继承<code>admin.ModelAdmin</code></li><li>在类中添加属性</li><li>注册</li></ol><p>问题：admin管理注册的时候，可以所有类一起进行注册吗？</p><p>答：不能，看<code>admin.site.register()</code>函数的参数</p><h4 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h4><p><img src="/2019/django/Django基本流/1562207616473.png" alt="1562207616473"></p><p>添加list_display:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Grades,Students</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GradesAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'pk'</span>, <span class="string">'gname'</span>, <span class="string">'gdate'</span>, <span class="string">'ggirlnum'</span>, <span class="string">'gboynum'</span>,<span class="string">'isDelete'</span>]</span><br><span class="line">admin.site.register(Grades,GradesAdmin)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/django/Django基本流/1562207461779.png" alt="1562207461779"></p><p>添加 list_filter:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_filter = ["gname"]</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/django/Django基本流/1562207931443.png" alt="1562207931443"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_filter = ["gname","gdate"]</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/django/Django基本流/1562207896404.png" alt="1562207896404"></p><p>添加search_fields </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = ["gname"]</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/django/Django基本流/1562208118111.png" alt="1562208118111"></p><p>添加 list_per_page</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_per_page = 5</span><br></pre></td></tr></tbody></table></figure><p>区分添加页和修改页</p><p>添加页：点击右上角的添加GRADES</p><p><img src="/2019/django/Django基本流/1562208280569.png" alt="1562208280569"></p><p>修改页:点击具体某一条数据</p><p><img src="/2019/django/Django基本流/1562208309520.png" alt="1562208309520"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fields ：修改显示的顺序</span><br><span class="line">fieldsets ：分组显示</span><br><span class="line">两者不能同时用，只是针对添加页和修改页起作用</span><br></pre></td></tr></tbody></table></figure><h4 id="关联对象："><a href="#关联对象：" class="headerlink" title="关联对象："></a>关联对象：</h4><p><img src="/2019/django/Django基本流/1562209278881.png" alt="1562209278881"></p><p><img src="/2019/django/Django基本流/1562209743129.png" alt="1562209743129"></p><p>需要三步：</p><ol><li>需要 创建一个类，继承<code>admin.TabularInline</code>或者<code>admin.StackedInline</code></li><li>需要设置model和extra两个变量</li><li>需要在GradesAdmin类中添加inlines</li></ol><p><img src="/2019/django/Django基本流/1562209952396.png" alt="1562209952396"></p><h4 id="布尔值显示问题："><a href="#布尔值显示问题：" class="headerlink" title="布尔值显示问题："></a>布尔值显示问题：</h4><p>字段类型为布尔值变量，显示的时候如果想要显示代表的含义，则需要自定义函数：</p><p><img src="/2019/django/Django基本流/1562210636893.png" alt="1562210636893"></p><p><img src="/2019/django/Django基本流/1562210765572.png" alt="1562210765572"></p><p>定义一个函数，进行判断，然后在list_display中将函数传入。</p><p><img src="/2019/django/Django基本流/1562210852149.png" alt="1562210852149"></p><h4 id="执行动作的位置"><a href="#执行动作的位置" class="headerlink" title="执行动作的位置"></a>执行动作的位置</h4><p>如图：目前执行动作位置在左上角，可以进行调整。</p><p><img src="/2019/django/Django基本流/1562210983941.png" alt="1562210983941"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 执行动作的位置</span><br><span class="line">actions_on_top = False</span><br><span class="line">actions_on_bottom = True</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/django/Django基本流/1562211070297.png" alt="1562211070297"></p><h3 id="9-5-3-使用装饰器进行注册"><a href="#9-5-3-使用装饰器进行注册" class="headerlink" title="9.5.3 使用装饰器进行注册"></a>9.5.3 使用装饰器进行注册</h3><p><img src="/2019/django/Django基本流/1562211354685.png" alt="1562211354685"></p><h1 id="10-视图的基本使用"><a href="#10-视图的基本使用" class="headerlink" title="10 视图的基本使用"></a>10 视图的基本使用</h1><h2 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1 概述"></a>10.1 概述</h2><p>一个视图就是一个页面，通常提供特定的功能，使用特定的模板。</p><p><img src="/2019/django/Django基本流/1562211688876.png" alt="1562211688876"></p><h2 id="10-2-编写视图"><a href="#10-2-编写视图" class="headerlink" title="10.2 编写视图"></a>10.2 编写视图</h2><p>编写一个简单的视图：（没有用到模板）</p><ol><li>导入HttpResponse</li><li>定义函数</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line">def index(request) </span><br><span class="line">#第一个参数：一般是requset 请求体 浏览器发送给服务器的</span><br><span class="line">#return httpResponse（） 服务器给浏览器返回的内容</span><br><span class="line">return HttpResponse("sunck is a good man")</span><br></pre></td></tr></tbody></table></figure><h2 id="10-3-配置url"><a href="#10-3-配置url" class="headerlink" title="10.3 配置url"></a>10.3 配置url</h2><ol><li>修改project目录下的url.py文件</li><li>在myapp应用目录下创建一个url.py文件</li></ol><p><img src="/2019/django/Django基本流/1562218787510.png" alt="1562218787510"></p><p>关于urlconf：</p><p><a href="https://blog.csdn.net/sinat_38369128/article/details/81702636" target="_blank" rel="noopener">https://blog.csdn.net/sinat_38369128/article/details/81702636</a></p><p>第一，目前 路由（url）到视图（View）的流程可以概括为四个步骤：</p><ol><li>url匹配</li><li>正则捕获</li><li>变量类型转化</li><li>视图调用</li></ol><p>Django2.0 和之前相比多了 <em>变量类型转化</em> 这一步骤。</p><p>第二，新的path语法可以解决一下以下几个场景：</p><ul><li>类型自动转化</li><li>公用正则表达式</li></ul><p>每个视图至少做两件事之一：返回一个包含请求页面的HttpResponse对象或者弹出一个类似Http404的异常。</p><h1 id="11-模板的基本使用"><a href="#11-模板的基本使用" class="headerlink" title="11 模板的基本使用"></a>11 模板的基本使用</h1><p><img src="/2019/django/Django基本流/1562220797530.png" alt="1562220797530"></p><h2 id="11-1-概述"><a href="#11-1-概述" class="headerlink" title="11.1 概述"></a>11.1 概述</h2><p>模板是HTML页面，可以根据视图中传过来的数据进行填充。</p><h2 id="11-2-创建模板的目录"><a href="#11-2-创建模板的目录" class="headerlink" title="11.2 创建模板的目录"></a>11.2 创建模板的目录</h2><p>方法1：</p><p>在与应用app同级目录下创建一个templates的文件，然后在该目录下创建对应应用的模板目录。</p><p>方法2：在应用目录下创建一个新的<code>templates</code>目录，Django会在它里面查找模板文件</p><h2 id="11-3-配置模板路径："><a href="#11-3-配置模板路径：" class="headerlink" title="11.3 配置模板路径："></a>11.3 配置模板路径：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: {</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>项目的 <code>TEMPLATES</code>配置项描述了 Django 如何载入和渲染模板</p><ol><li><p><code>'BACKEND': 'django.template.backends.django.DjangoTemplates',</code>默认的设置文件设置了 <code>DjangoTemplates</code> 后端 </p></li><li><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">#变量__file__表示文件本身，输出的是一个绝对路径</span><br></pre></td></tr></tbody></table></figure></li><li><p>将 <code>APP_DIRS</code>设置成了 True。这一选项将会让 <code>DjangoTemplates</code> 在每个 <code>INSTALLED_APPS</code> 文件夹中寻找 “templates” 子目录</p></li></ol><h2 id="11-4-定义模板"><a href="#11-4-定义模板" class="headerlink" title="11.4 定义模板"></a>11.4 定义模板</h2><h1 id="12-流程梳理"><a href="#12-流程梳理" class="headerlink" title="12 流程梳理"></a>12 流程梳理</h1><p><img src="/2019/django/Django基本流/1562230502899.png" alt="1562230502899"></p><p>参考：</p><p><a href="http://www.liujiangblog.com/blog/36/" target="_blank" rel="noopener">http://www.liujiangblog.com/blog/36/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django创建项目</title>
      <link href="/2019/django/django%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE"/>
      <url>/2019/django/django%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE</url>
      
        <content type="html"><![CDATA[<h1 id="1-在cmd或Linux命令行环境下创建Django项目"><a href="#1-在cmd或Linux命令行环境下创建Django项目" class="headerlink" title="1. 在cmd或Linux命令行环境下创建Django项目"></a>1. 在cmd或Linux命令行环境下创建Django项目</h1><h2 id="1-1-创建django工程"><a href="#1-1-创建django工程" class="headerlink" title="1.1 创建django工程"></a>1.1 创建django工程</h2><p>在windows的cmd环境中(Linux中类同)，新建或者进入你想创建Django项目的目录，然后输入下面的命令：</p><p><code>django-admin startproject mysite</code></p><p>这样就会在当前目录下创建一个叫做mysite的Django项目</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D:\test>django-admin startproject mysite</span><br><span class="line">D:\test>dir</span><br><span class="line"></span><br><span class="line"> D:\test 的目录</span><br><span class="line"></span><br><span class="line">2019/4/20  11:19    <DIR>          .</DIR></span><br><span class="line">2019/4/20  11:19    <DIR>          ..</DIR></span><br><span class="line">2019/4/20  11:19    <DIR>          mysite</DIR></span><br><span class="line">               0 个文件              0 字节</span><br><span class="line">               3 个目录 102,160,605,184 可用字节</span><br></pre></td></tr></tbody></table></figure><p>可以看到Django自动帮我们创建了一个mysite文件夹，这是项目的根目录。</p><p>在mysite根目录中，又有一个mysite目录，这是整个项目的配置文件目录（一定不要和同名的根目录搞混淆了），还有一个manage.py文件，是整个项目的管理脚本</p><a id="more"></a><h2 id="1-2-django项目目录说明"><a href="#1-2-django项目目录说明" class="headerlink" title="1.2 django项目目录说明"></a>1.2 django项目目录说明</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---mysite               外层的mysite/目录与Django无关，只是你项目的容器，可以任意重命名。</span><br><span class="line">    |   db.sqlite3</span><br><span class="line">    |   manage.py            一个命令行工具，可以使我们用多种方式对Django项目进行交互</span><br><span class="line">    ---mysite</span><br><span class="line">        |   settings.py      项目的配置文件</span><br><span class="line">        |   urls.py          项目的url声明</span><br><span class="line">        |   wsgi.py          项目与wsgi兼容的web服务器入口</span><br><span class="line">        |   init.py          一个空文件，它告诉python这个目录应该被视为一个python包</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/django/django创建项/1562120589450.png" alt="1562120589450"></p><h2 id="1-3-运行django"><a href="#1-3-运行django" class="headerlink" title="1.3 运行django"></a>1.3 运行django</h2><p>在项目根目录下，运行<code>python manage.py runserver</code>，Django会以<code>127.0.0.1:8000</code>这个默认配置启动开发服务器。</p><p><strong>Django提供了一个用于开发的web服务器，使你无需配置一个类似Ngnix的生产服务器，就能让站点运行起来。</strong>这是一个由Python编写的轻量级服务器，简易并且不安全，因此不要将它用于生产环境。</p><p><img src="/2019/django/django创建项/1562120456540.png" alt="1562120456540"></p><p>注：</p><p>Django的开发服务器（以后简称服务器）默认运行在内部的8000端口，如果你想指定端口，请在命令中显示给出：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">8080</span></span><br></pre></td></tr></tbody></table></figure><p>如果想修改服务器的ip地址</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 0:8000</span><br></pre></td></tr></tbody></table></figure><p>0 是 0.0.0.0 的简写，Django将运行在0.0.0.0:8000上，整个局域网内都将可以访问站点，而不只是是本机</p><h1 id="2-在windows下使用Pycharm创建Django工程"><a href="#2-在windows下使用Pycharm创建Django工程" class="headerlink" title="2. 在windows下使用Pycharm创建Django工程"></a>2. 在windows下使用Pycharm创建Django工程</h1><p>2018以后的Pycharm版本都支持同时创建虚拟环境和Django工程</p><p>首先打开Pycharm，点击<code>file-->new project</code>，出现下面的对话框，注意下面的红框提示：</p><p><img src="/2019/django/django创建项/85-6.png" alt="image"></p><ul><li><p>在Location处选择工程目录</p></li><li><p>在New environment using处选择Virtualenv（这可能需要你提前pip install virtualenv进行虚拟工具virtualenv的安装）。通常情况下，虚拟环境会以venv的名字，自动在工程目录下生成。</p></li><li><p>在Base interpreter处，选择你要使用的Python解释器</p></li><li><p>下面两个单选框，根据需要自行选择</p></li></ul><ul><li>如果想使用现成的解释器或者虚拟环境，请选择Existing interpreter</li></ul><p><img src="/2019/django/django创建项/85-7-1562121384003.png" alt="image"></p><p>再点开下方的More Settings：</p><ul><li>Template language:选择使用的模板语言，默认Django就行，可选Jinjia。</li><li>Templates folder：Pycharm安利给我们的功能，额外创建一个工程级别的模板文件的保存目录，可以不设置，空着，这里使用默认设置吧。</li><li>启用Admin，一般勾上。</li></ul><p><img src="/2019/django/django创建项/85-8.png" alt="image"></p><p>没什么问题了，就点击Create吧。</p><p>下面就是一段时间的等待，Pycharm会帮助我们自动创建虚拟环境，以及安装最新版本的Django。</p><p>创建完成之后，进入Pycharm的设置菜单，可以看到当前Django版本是最新的2.2版本。如果你要指定过去的版本，比如2.1、1.11等，那就不能这么操作了，需要在命令行下自己创建虚拟环境并安装django。或者在这里先删除Django，再安装你想要的指定版本。</p><p><img src="/2019/django/django创建项/85-9.png" alt="image"></p><p>看下我们当前的状态，注意venv这个虚拟环境目录，以及我们额外创建的templats目录：</p><p><img src="/2019/django/django创建项/85-10.png" alt="image"></p><p>点击绿色的三角，启动默认的开发服务器，如果看到欢迎界面，说明一切OK!</p><p>注：使用pycharm在离线环境下安装，容易出现问题：因为需要通过pip安装django </p><p>问题：在pycharm中settings </p><p><img src="/2019/django/django创建项/1562122956740.png" alt="1562122956740"></p><p>这个的作用</p><p><img src="/2019/django/django创建项/1562123393004.png" alt="1562123393004"></p><p>参考：</p><p><a href="https://www.cnblogs.com/wcwnina/p/9136398.html" target="_blank" rel="noopener">pycharm创建django项目</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django安装</title>
      <link href="/2019/django/django%E5%AE%89%E8%A3%85"/>
      <url>/2019/django/django%E5%AE%89%E8%A3%85</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>Django是由Python编写的Web框架，依赖Python环境，所以需要提前安装好Python解释器。</p><p>进行Python + Django的Web开发，最佳IDE环境是Pycharm</p><p>Django对Python版本的依赖关系如下表所示：</p><table><thead><tr><th align="left">Django 版本</th><th align="left">Python 版本</th></tr></thead><tbody><tr><td align="left">1.8</td><td align="left">2.7, 3.2 (until the end of 2016), 3.3, 3.4, 3.5</td></tr><tr><td align="left">1.9, 1.10</td><td align="left">2.7, 3.4, 3.5</td></tr><tr><td align="left">1.11</td><td align="left">2.7，3.4，3.5，3.6，3.7 (1.11.17添加)</td></tr><tr><td align="left">2.0</td><td align="left">3.4，3.5，3.6，3.7</td></tr><tr><td align="left">2.1，2.2</td><td align="left">3.5, 3.6, 3.7</td></tr></tbody></table><a id="more"></a><h1 id="2-安装Django"><a href="#2-安装Django" class="headerlink" title="2 安装Django"></a>2 安装Django</h1><h2 id="2-1-通过pip-安装Django"><a href="#2-1-通过pip-安装Django" class="headerlink" title="2.1 通过pip 安装Django"></a>2.1 通过pip 安装Django</h2><p>Django本质上是Python语言的一个类库，因此可以通过pip工具安装。这也是最简便最好的安装方式。不建议通过下载安装包或者编译源码进行安装的方法，除非你的环境无法连接外部网络。</p><p>这里介绍windows系统下pip命令安装方式。</p><p>win+r，调出cmd，运行命令：<code>pip install django</code>，自动安装PyPi提供的最新版本。</p><p>如果要指定版本，可使用<code>pip install django==2.2</code>这种形式。</p><p>在Linux操作系统中，也是一样，使用pip工具包安装Django</p><h2 id="2-2-验证"><a href="#2-2-验证" class="headerlink" title="2.2 验证"></a>2.2 验证</h2><p>进入Python交互式环境</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> django</span><br><span class="line">print(django.get_version())</span><br></pre></td></tr></tbody></table></figure><p>或者使用<code>pip list</code>命令，查看是否存在Django模块</p><h2 id="2-3-配置系统环境变量"><a href="#2-3-配置系统环境变量" class="headerlink" title="2.3 配置系统环境变量"></a>2.3 配置系统环境变量</h2><p>成功安装Django后，以windows为例，在Python根目录下的Scripts目录中可找到一个<code>django-admin.exe</code>文件，这是Django的核心管理程序，最好将它加入操作系统的环境变量中，这样在以后的调用会比较方便</p><p>回到cmd界面，运行<code>django-admin help</code>，能看到下面的内容表示环境变量设置成功。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\USER>django-admin help</span><br><span class="line"></span><br><span class="line">Type 'django-admin help <subcommand>' for help on a specific subcommand.</subcommand></span><br><span class="line"></span><br><span class="line">Available subcommands:</span><br><span class="line"></span><br><span class="line">[django]</span><br><span class="line">    check</span><br><span class="line">    compilemessages</span><br><span class="line">    createcachetable</span><br><span class="line">    dbshell</span><br><span class="line">    diffsettings</span><br><span class="line">    dumpdata</span><br><span class="line">    flush</span><br><span class="line">    inspectdb</span><br><span class="line">    loaddata</span><br><span class="line">    makemessages</span><br><span class="line">    makemigrations</span><br><span class="line">    migrate</span><br><span class="line">    runserver</span><br><span class="line">    sendtestemail</span><br><span class="line">    shell</span><br><span class="line">    showmigrations</span><br><span class="line">    sqlflush</span><br><span class="line">    sqlmigrate</span><br><span class="line">    sqlsequencereset</span><br><span class="line">    squashmigrations</span><br><span class="line">    startapp</span><br><span class="line">    startproject</span><br><span class="line">    test</span><br><span class="line">    testserver</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/django/django安/1562119593874.png" alt="1562119593874"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己的博客</title>
      <link href="/2019/%E5%B7%A5%E5%85%B7/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2"/>
      <url>/2019/%E5%B7%A5%E5%85%B7/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>技术：Hexo+github</p><p>好处：</p><ol><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li><li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li></ol><p>准备工作：</p><ul><li>有一个github账号，没有的话去注册一个；</li><li>安装了node.js、npm，并了解相关基础知识；</li><li>安装了git for windows（或者其它git客户端）</li></ul><h1 id="搭建github博客"><a href="#搭建github博客" class="headerlink" title="搭建github博客"></a>搭建github博客</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><ol><li><p>登录github账号后新创建一格式为：<code>你的用户名.github.io</code> </p><p>比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/" target="_blank" rel="noopener">http://test.github.io</a> 了</p></li><li><p>点击Settings设置，然后往下拉，找到<code>github pages</code>，点击<code>choose a theme</code>选择喜欢主题</p></li><li><p>在浏览器输入 <code>用户名.github.io</code>访问自己博客</p></li></ol><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><a id="more"></a><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><h2 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h2><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>官网： <a href="http://hexo.io/" target="_blank" rel="noopener">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>​        由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 生成hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的</span><br><span class="line">hexo s # 开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容</span><br><span class="line">hexo clean #清理public的内容，然后再来重新生成和发布</span><br><span class="line">hexo d # 上传</span><br><span class="line">hexo new "postName" #新建文章</span><br><span class="line">hexo new page "pageName" #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br><span class="line">缩写：</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line">组合命令：</span><br><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></tbody></table></figure><p>注：</p><ul><li>执行hexo d 命令之前，可能需要安装 npm install hexo-deployer-git –save</li><li>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</li></ul><h2 id="hexo环境搭建："><a href="#hexo环境搭建：" class="headerlink" title="hexo环境搭建："></a>hexo环境搭建：</h2><ol><li><p>安装git</p></li><li><p>安装<a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a></p></li><li><p>创建存放hexo组件的目录，然后<code>Git bash here</code></p></li><li><p>安装hexo <code>npm install hexo -g</code></p></li><li><p><code>hexo -v</code>，检查hexo是否安装成功</p></li><li><p>初始化文件夹 <code>hexo init</code></p><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><p><img src="/2019/工具/搭建自己的博/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="目录结构"></p></li><li><p><code>npm install</code> 安装所需要的组件</p></li><li><p>将Hexo于Github page 联系起来，设置Git的user name 和email</p><p><code>git config --global user.name "qianlongshenyong"</code></p><p><code>git config --global user.email"1320005085@qq.com"</code></p></li><li><p>修改 <code>D:\blog\_config.yml</code> 并保存</p></li></ol><p><img src="/2019/工具/搭建自己的博/%E4%BF%AE%E6%94%B9.jpg" alt="修改"></p><ol start="10"><li><code>hexo s</code> 启动服务，在本地4000端口开启服务</li><li>在浏览器输入127.0.0.1:4000访问博客主页</li></ol><h1 id="使用Hexo修改博客主题"><a href="#使用Hexo修改博客主题" class="headerlink" title="使用Hexo修改博客主题"></a>使用Hexo修改博客主题</h1><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>选择博客主题<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p></li><li><p>选择tomotoes主题</p></li><li><p>复制主题链接，</p></li><li><p><code>D:\blog\themes</code>,右键选择git bash here</p></li><li><p>下载所选主题<code>git clone https://github.com/Tomotoes/hexo-theme-tomotoes.git</code></p></li><li><p>修改主题名称为tomotoes</p></li><li><p>修改 <code>D:\blog\_config.yml</code> 中theme并保存</p><p><img src="/2019/工具/搭建自己的博/%E4%BF%AE%E6%94%B9theme.png" alt="修改theme"></p></li><li><p>然后在==blog目录==下打开git输入<code>hexo s</code>，本地预览效果.</p></li></ol><h2 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h2><p>按照<code>https://github.com/Tomotoes/hexo-theme-tomotoes.git</code>有部署文档</p><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><p>还是在 Hexo 根目录，如果以下插件已安装过，无需再次安装。</p><h4 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h4><p>主题默认使用 less 作为 css 预处理工具。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-less --save</span><br></pre></td></tr></tbody></table></figure><h4 id="Feed"><a href="#Feed" class="headerlink" title="Feed"></a>Feed</h4><p>用于生成 rss。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></tbody></table></figure><h4 id="Json-content"><a href="#Json-content" class="headerlink" title="Json-content"></a>Json-content</h4><p>用于生成静态站点数据，用作站内搜索的数据源。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content --save</span><br></pre></td></tr></tbody></table></figure><h4 id="QRCode"><a href="#QRCode" class="headerlink" title="QRCode"></a>QRCode</h4><p>用于生成微信分享二维码。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-helper-qrcode --save</span><br></pre></td></tr></tbody></table></figure><h4 id="hexo-wordcount"><a href="#hexo-wordcount" class="headerlink" title="hexo-wordcount"></a>hexo-wordcount</h4><p>用来显示文章更多信息，比如：字数，阅读时间</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></tbody></table></figure><h4 id="hexo-abbrlink"><a href="#hexo-abbrlink" class="headerlink" title="hexo-abbrlink"></a>hexo-abbrlink</h4><p><strong>文章唯一链接，有利于SEO，主题脚本也对其有依赖</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></tbody></table></figure><h4 id="hexo-filter-github-emojis"><a href="#hexo-filter-github-emojis" class="headerlink" title="hexo-filter-github-emojis"></a>hexo-filter-github-emojis</h4><p>Emoji插件，让文章更生动</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></tbody></table></figure><p>安装完成后再次运行<code>hexo s</code></p><h2 id="开启页面"><a href="#开启页面" class="headerlink" title="开启页面"></a>开启页面</h2><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></tbody></table></figure><p>修改 hexo/source/tags/index.md 的元数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layout: tags</span><br><span class="line">comments: false</span><br></pre></td></tr></tbody></table></figure><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></tbody></table></figure><p>修改 hexo/source/categories/index.md 的元数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layout: categories</span><br><span class="line">comments: false</span><br></pre></td></tr></tbody></table></figure><h3 id="关于页"><a href="#关于页" class="headerlink" title="关于页"></a>关于页</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></tbody></table></figure><p>修改 hexo/source/about/index.md 的元数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: about</span><br><span class="line">comments: true</span><br><span class="line">reward: false</span><br></pre></td></tr></tbody></table></figure><h2 id="根据需求修改主题的配置"><a href="#根据需求修改主题的配置" class="headerlink" title="根据需求修改主题的配置"></a>根据需求修改主题的配置</h2><ol><li><p>修改 `D:\blog_config.yml</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: </span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">author: peter</span><br><span class="line">emial: 1320005085@qq.com</span><br><span class="line">url:</span><br></pre></td></tr></tbody></table></figure></li><li><p>保存预览</p></li><li><p><code>npm install –save hexo-deployer-git</code></p></li><li><p><code>hexo d –g</code></p></li></ol><h1 id="关于-config-yml"><a href="#关于-config-yml" class="headerlink" title="关于_config.yml"></a>关于_config.yml</h1><h2 id="hexo的-config-yml"><a href="#hexo的-config-yml" class="headerlink" title="hexo的_config.yml"></a>hexo的_config.yml</h2><p>站点配置文件，也就是站点根目录下的_config.yml配置文件</p><h2 id="主题的-config-yml"><a href="#主题的-config-yml" class="headerlink" title="主题的_config.yml"></a>主题的_config.yml</h2><p>主题配置文件，位于theme文件夹中对应主题的文件夹下的_config.yml。</p><h3 id="设置主页的Menu"><a href="#设置主页的Menu" class="headerlink" title="设置主页的Menu"></a>设置主页的Menu</h3><p>设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，它将用于匹配图标以及翻译。</p><p>菜单示例配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  #about: /about</span><br><span class="line">  #categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="https://blog.csdn.net/tonydandelion2014/article/details/61615898" target="_blank" rel="noopener">https://blog.csdn.net/tonydandelion2014/article/details/61615898</a></p><h1 id="hexo写博客"><a href="#hexo写博客" class="headerlink" title="hexo写博客"></a>hexo写博客</h1><p>配置完之后，有两种方法写博客。</p><h2 id="方法1-通过hexo命令"><a href="#方法1-通过hexo命令" class="headerlink" title="方法1 通过hexo命令"></a>方法1 通过hexo命令</h2><p>定位到blog目录下，执行<code>hexo new 'my-first-blog'</code>hexo会帮我们在<code>_posts</code>下生成相关md文件,我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p><p><img src="/2019/工具/搭建自己的博/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9A%84%E6%A0%BC%E5%BC%8F.png" alt="自动生成的格式"></p><h2 id="方法2-自己创建md文件"><a href="#方法2-自己创建md文件" class="headerlink" title="方法2 自己创建md文件"></a>方法2 自己创建md文件</h2><p>通过typora等md编辑器自己创建md文件，但是必须符合以下开头。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">注:冒号后面必须要有空格 这是yaml语法的规定</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/工具/搭建自己的博/%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8.jpg" alt="参数列表"></p><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><p><code>hexo new page 'postName'</code>命令和<code>hexo new 'postName'</code>有什么区别呢</p><p>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><h1 id="如何让博文列表不显示全部内容"><a href="#如何让博文列表不显示全部内容" class="headerlink" title="如何让博文列表不显示全部内容"></a>如何让博文列表不显示全部内容</h1><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p><p><img src="/2019/工具/搭建自己的博/1563088323304.png" alt="1563088323304"></p><h1 id="图片设置问题"><a href="#图片设置问题" class="headerlink" title="图片设置问题"></a>图片设置问题</h1><p>解决方式是使用<strong>CodeFalling/hexo-asset-image插件</strong>。</p><h4 id="1-post-asset-folder"><a href="#1-post-asset-folder" class="headerlink" title="1. post_asset_folder"></a>1. post_asset_folder</h4><p>首先确认<strong>_config.yml</strong>中有<strong>post_asset_folder:true</strong>。</p><p>Hexo提供了一种更方便管理Asset的设定：<strong>post_asset_folder</strong><br> 当您设置<strong>post_asset_folder</strong>为<strong>true</strong>参数后，在建立文件时，Hexo<br> 会自动建立一个与文章同名的文件夹；以前的文章也可以自己手动创建同名文件夹。</p><h4 id="2-安装-hexo-asset-image"><a href="#2-安装-hexo-asset-image" class="headerlink" title="2. 安装 hexo-asset-image"></a>2. 安装 hexo-asset-image</h4><p>在hexo的目录下执行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></tbody></table></figure><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><p>完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。结构如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本地图片测试</span><br><span class="line">├── logo.jpg</span><br><span class="line">本地图片测试.md</span><br></pre></td></tr></tbody></table></figure><p>这样的目录结构（目录名和文章名一致），只要使用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](本地图片测试/logo.jpg)</span><br></pre></td></tr></tbody></table></figure><p>就可以插入图片。其中[]里面不写文字则没有图片标题。<br> 生成的结构为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public/2016/3/9/本地图片测试</span><br><span class="line">                ├── index.html</span><br><span class="line">                ├── logo.jpg</span><br></pre></td></tr></tbody></table></figure><p>同时，生成的 html 是</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/2016/3/9/本地图片测试/logo.jpg)</span><br></pre></td></tr></tbody></table></figure><p>而不是愚蠢的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](本地图片测试/logo.jpg)</span><br></pre></td></tr></tbody></table></figure><p>个人喜欢typora编辑器，在偏好设置中将图片插入设置为如下：然后只需将后缀.assets删除，即可与hexo文件夹名称相同。</p><p><img src="/2019/工具/搭建自己的博/%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E6%A0%BC%E5%BC%8F.png" alt="图片保存格式"></p><h1 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h1><ol><li><p>输入hexo d –g 提示找不到git </p><p>解决办法：<code>npm install –save hexo-deployer-git</code></p></li><li><p>点击主页或者归档显示找不到页面</p><p>解决办法：主题设置中有关于开启页面的指令</p></li><li><p>图片显示不出来问题</p><p>解决办法：采用CodeFalling/hexo-asset-image</p></li></ol><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ol><li><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#hexo%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#hexo%E7%AE%80%E4%BB%8B</a></li><li><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></li><li><a href="https://foxgrin.github.io/posts/29757/" target="_blank" rel="noopener">https://foxgrin.github.io/posts/29757/</a></li><li><a href="https://blog.annieyu.com/posts/3333782006.html" target="_blank" rel="noopener">https://blog.annieyu.com/posts/3333782006.html</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
