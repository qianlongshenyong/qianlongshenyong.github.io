<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[搭建自己的博客]]></title>
    <url>%2F2019%2F06%2F23%2F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言：技术：Hexo+github 好处： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 准备工作： 有一个github账号，没有的话去注册一个； 安装了node.js、npm，并了解相关基础知识； 安装了git for windows（或者其它git客户端） 搭建github博客创建仓库 登录github账号后新创建一格式为：你的用户名.github.io 比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了 点击Settings设置，然后往下拉，找到github pages，点击choose a theme选择喜欢主题 在浏览器输入 用户名.github.io访问自己博客 绑定域名配置SSH key hexohexo简介Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。 官网： http://hexo.iogithub: https://github.com/hexojs/hexo 原理​ 由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 hexo常用命令12345678910111213141516171819hexo g # 生成hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的hexo s # 开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容hexo clean #清理public的内容，然后再来重新生成和发布hexo d # 上传hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本缩写：hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy组合命令：hexo s -g #生成并本地预览hexo d -g #生成并上传 注： 执行hexo d 命令之前，可能需要安装 npm install hexo-deployer-git –save 在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 hexo环境搭建： 安装git 安装nodejs 创建存放hexo组件的目录，然后Git bash here 安装hexo npm install hexo -g hexo -v，检查hexo是否安装成功 初始化文件夹 hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： npm install 安装所需要的组件 将Hexo于Github page 联系起来，设置Git的user name 和email git config --global user.name "qianlongshenyong" git config --global user.email"1320005085@qq.com" 修改 D:\blog\_config.yml 并保存 hexo s 启动服务，在本地4000端口开启服务 在浏览器输入127.0.0.1:4000访问博客主页 使用Hexo修改博客主题操作步骤 选择博客主题https://hexo.io/themes/ 选择tomotoes主题 复制主题链接， D:\blog\themes,右键选择git bash here 下载所选主题git clone https://github.com/Tomotoes/hexo-theme-tomotoes.git 修改主题名称为tomotoes 修改 D:\blog\_config.yml 中theme并保存 然后在==blog目录==下打开git输入hexo s，本地预览效果. 修改主题配置按照https://github.com/Tomotoes/hexo-theme-tomotoes.git有部署文档 依赖安装还是在 Hexo 根目录，如果以下插件已安装过，无需再次安装。 Less主题默认使用 less 作为 css 预处理工具。 1$ npm install hexo-renderer-less --save Feed用于生成 rss。 1$ npm install hexo-generator-feed --save Json-content用于生成静态站点数据，用作站内搜索的数据源。 1$ npm install hexo-generator-json-content --save QRCode用于生成微信分享二维码。 1$ npm install hexo-helper-qrcode --save hexo-wordcount用来显示文章更多信息，比如：字数，阅读时间 1npm install hexo-wordcount --save hexo-abbrlink文章唯一链接，有利于SEO，主题脚本也对其有依赖 1npm install hexo-abbrlink --save hexo-filter-github-emojisEmoji插件，让文章更生动 1npm install hexo-filter-github-emojis --save 安装完成后再次运行hexo s 开启页面标签页1hexo new page tags 修改 hexo/source/tags/index.md 的元数据 12layout: tagscomments: false 分类页1hexo new page categories 修改 hexo/source/categories/index.md 的元数据 12layout: categoriescomments: false 关于页1hexo new page about 修改 hexo/source/about/index.md 的元数据 123layout: aboutcomments: truereward: false 根据需求修改主题的配置 修改 `D:\blog_config.yml 1234567title: subtitle:description:keywords:author: peteremial: 1320005085@qq.comurl: 保存预览 npm install –save hexo-deployer-git hexo d –g 关于_config.ymlhexo的_config.yml站点配置文件，也就是站点根目录下的_config.yml配置文件 主题的_config.yml主题配置文件，位于theme文件夹中对应主题的文件夹下的_config.yml。 设置主页的Menu设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，它将用于匹配图标以及翻译。 菜单示例配置 1234567menu: home: / archives: /archives #about: /about #categories: /categories tags: /tags #commonweal: /404.html 参考：https://blog.csdn.net/tonydandelion2014/article/details/61615898 hexo写博客配置完之后，有两种方法写博客。 方法1 通过hexo命令定位到blog目录下，执行hexo new 'my-first-blog'hexo会帮我们在_posts下生成相关md文件,我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 方法2 自己创建md文件通过typora等md编辑器自己创建md文件，但是必须符合以下开头。 12345678910---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---注:冒号后面必须要有空格 这是yaml语法的规定 其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。 hexo new page 'postName'命令和hexo new 'postName'有什么区别呢 最终部署时生成：hexo\public\my-second-blog\index.html，但是它不会作为文章出现在博文目录。 如何让博文列表不显示全部内容默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？ 答案是在合适的位置加上即可，例如： 图片设置问题解决方式是使用CodeFalling/hexo-asset-image插件。 1. post_asset_folder首先确认_config.yml中有post_asset_folder:true。 Hexo提供了一种更方便管理Asset的设定：post_asset_folder 当您设置post_asset_folder为true参数后，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹；以前的文章也可以自己手动创建同名文件夹。 2. 安装 hexo-asset-image在hexo的目录下执行 1npm install https://github.com/CodeFalling/hexo-asset-image --save 3. 使用完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。结构如下： 123本地图片测试├── logo.jpg本地图片测试.md 这样的目录结构（目录名和文章名一致），只要使用 1![](本地图片测试/logo.jpg) 就可以插入图片。其中[]里面不写文字则没有图片标题。 生成的结构为 123public/2016/3/9/本地图片测试 ├── index.html ├── logo.jpg 同时，生成的 html 是 1![](/2016/3/9/本地图片测试/logo.jpg) 而不是愚蠢的 1![](本地图片测试/logo.jpg) 个人喜欢typora编辑器，在偏好设置中将图片插入设置为如下：然后只需将后缀.assets删除，即可与hexo文件夹名称相同。 常见问题： 输入hexo d –g 提示找不到git 解决办法：npm install –save hexo-deployer-git 点击主页或者归档显示找不到页面 解决办法：主题设置中有关于开启页面的指令 图片显示不出来问题 解决办法：采用CodeFalling/hexo-asset-image 参考： https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#hexo%E7%AE%80%E4%BB%8B https://blog.csdn.net/sinat_37781304/article/details/82729029 https://foxgrin.github.io/posts/29757/ https://blog.annieyu.com/posts/3333782006.html document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
