{"meta":{"title":"潜龙慎用","subtitle":null,"description":"扬帆起航风雨兼程，乘风破浪再接再厉；高瞻远瞩坚定目标，无怨无悔直达彼岸。","author":"潜龙慎用","url":"https://qianlongshenyong.github.io","root":"/"},"pages":[{"title":"","date":"2019-06-29T09:33:06.733Z","updated":"2019-06-29T09:33:06.733Z","comments":true,"path":"about/index.html","permalink":"https://qianlongshenyong.github.io/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2019-06-29T07:32:07.000Z","updated":"2019-06-29T07:32:54.392Z","comments":true,"path":"tags/index.html","permalink":"https://qianlongshenyong.github.io/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2019-06-29T07:33:32.000Z","updated":"2019-06-29T07:34:14.409Z","comments":true,"path":"categories/index.html","permalink":"https://qianlongshenyong.github.io/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"前端之HTML","slug":"前端之HTML","date":"2019-07-07T08:38:17.000Z","updated":"2019-07-07T09:19:57.364Z","comments":true,"path":"2019/07/07/前端之HTML/","link":"","permalink":"https://qianlongshenyong.github.io/2019/07/07/前端之HTML/","excerpt":"","text":"1 HTML概述 HTML 指的是超文本标记语言 (Hyper Text Markup Language) HTML 不是一种编程语言，而是一种标记语言 (markup language) 标记语言是一套标记标签 (markup tag) HTML 使用标记标签来描述网页 HTML是一个标准,规定了大家怎么写网页. HTML基本概念 1.1标签 HTML 标签是由尖括号包围的关键词，比如 HTML 标签通常是成对出现的，标签对中的第一个标签是开始标签，第二个标签是结束标签 标签与标签之间是可以嵌套的，但先后顺序必须保持一致，如：里嵌套，那么必须放在的前面。 1.2元素HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。 1.2.1 嵌套的 HTML 元素大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素）。 HTML 文档由嵌套的 HTML 元素构成。 1.2 .2 html元素12345678910 Title This is my first paragraph. 是说明这个是一个网页。告诉浏览器这个网页的开始和结束。他包含了之后的两个元素。和|和 元素定义了整个 HTML 文档。 这个元素拥有一个开始标签 ，以及一个结束标签 。 元素内容是另一个 HTML 元素（body 元素）和（head 元素） 1.2.3 head 元素：1234 Title head>和之间的内容，是元信息和网站的标题 元信息一般是不显示出来的,但是记录了你这个HTML文件的很多有用的信息 1.2.4 body元素：123This is my first paragraph. 和L2Dwidget.init({\"model\":{\"jsonPath\":\"live2d-widget-model-miku\"},\"display\":{\"position\":\"right\",\"width\":140,\"height\":260},\"mobile\":{\"show\":true},\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});之间的内容，是浏览器呈现出来的，用户看到的页面效果。也就是说这里是网页的主体。也就是body的身体之意 1.2.5 段落 元素1This is my first paragraph. 这个 元素定义了 HTML 文档中的一个段落。 这个元素拥有一个开始标签 ，以及一个结束标签 。 元素内容是：This is my first paragraph。 1.2.6 空的 HTML 元素没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。 就是没有关闭标签的空元素. 1.3属性HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。 属性总是以名称/值对的形式出现，比如：name=”value”。 属性总是在 HTML 元素的开始标签中规定 HTML 提示：使用小写标签 HTML 标签对大小写不敏感： 等同于 。许多网站都使用大写的 HTML 标签。 几个重要的属性： id：定义标签的唯一ID，HTML文档树中唯一 class：为html元素定义一个或多个类名（classname）(CSS样式类名) style：规定元素的行内样式（CSS样式） 2 HTML 文档 = 网页 HTML 文档描述网页 HTML 文档包含 HTML 标签和纯文本 HTML 文档也被称为网页 Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容： 123456789我的第一个标题我的第一个段落。 12345解释： 与 之间的文本描述网页 与 之间的文本是可见的页面内容 与 之间的文本被显示为标题 与 之间的文本被显示为段落 ==学HTML主要是学标签== 3 HTML 标签分类标签可以理解为 标签的分类： 单标签和双标签 块级标签和内联标签 块级标签：默认占浏览器长度，可以设置长和宽 h1~h6 div p hr（水平线） 内联标签：根据内容决定长度，不能设置长和宽 a img u s b span i 块级元素与行内元素的区别：所谓块元素，是以另起一行开始渲染的元素，行内元素则不需另起一行。如果单独在网页中插入这两个元素，不会对页面产生任何的影响。这两个元素是专门为定义CSS样式而生的。 展示标签和交互标签 标签的语法： 内容部分 4 HTML文件结构：12345678910 Title 注：使用pycharm创建一个html文件，会自动补全 1234567声明为HTML5文档。搜索引擎表示该页面是html语言，lang是language的缩写、是文档的开始标记和结束的标记。是HTML页面的根元素，在它们之间是文档的头部（head）和主体（body）。、定义了HTML文档的开头部分。它们之间的内容不会在浏览器的文档窗口显示。包含了文档的元（meta）数据。、定义了网页标题，在浏览器标题栏显示。、之间的文本是可见的网页主体内容。注意：对于中文网页需要使用 声明编码，否则会出现乱码。有些浏览器会设置 GBK 为默认编码，则你需要设置为 。 一个简单的 HTML 文档，带有最基本的必需的元素： 123html 标签 head 标签 其中，在head标签中，必须要有title标签 body 标签 5 HTML 常用标签5.1 HTML注释1 5.2 标签 声明必须是 HTML 文档的第一行，位于 标签之前。 声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。 doctype告诉浏览器使用什么样的html或xhtml规范来解析html文档 HTML语言需要一个标准，当我们在第一行指定了的时候，当浏览器去访问我们的代码的时候就就按照HTML代码里指定的标准去读取和渲染给我们展现的页面。 5.3 头部标签 1 标签用于定义文档的头部，它是所有头部元素的容器。文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。 下面这些标签可用在 head 部分: 标签 意义 定义网页标题 定义内部样式表 定义JS代码或引入外部JS文件 引入外部样式表文件 定义网页原信息(给浏览器看的) 注： 单标签：==/==可以加也可以不加 定义文档的标题，它是 head 部分中唯一必需的元素。 chrom浏览器 查看网页的三种方法： 鼠标右键 查看网页源码 快捷键ctrl+u F12 5.3.1 Meta标签Meta标签介绍：提供有关页面的元信息，例：页面编码、刷新、跳转、针对搜索引擎和更新频度的描述和关键词 ‘‘元素可提供有关页面的元信息（mata-information）,针对搜索引擎和更新频度的描述和关键词。 ‘‘标签位于文档的头部，不包含任何内容。 ‘‘提供的信息是用户不可见的。 meta标签的组成：meta标签共有两个属性，它们分别是http-equiv属性和name 属性，不同的属性又有不同的参数值，这些不同的参数值就实现了不同的网页功能。 http-equiv属性：相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。 123456","categories":[{"name":"前端","slug":"前端","permalink":"https://qianlongshenyong.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://qianlongshenyong.github.io/tags/前端/"}]},{"title":"前端","slug":"前端","date":"2019-07-07T08:21:01.000Z","updated":"2019-07-07T08:37:35.392Z","comments":true,"path":"2019/07/07/前端/","link":"","permalink":"https://qianlongshenyong.github.io/2019/07/07/前端/","excerpt":"","text":"1 前言​ 编程就是跟数据打交道，我们需要处理数据，存储数据，展示数据。什么是前端，为什么学前端。 2 web前端概述​ web前端开发是从网页制作演变而来。在互联网的演化进程中，网页制作是Web 1.0时代的产物，早期网站主要内容都是静态，以图片和文字为主，用户使用网站的行为也以浏览为主。随着互联网技术的发展和HTML5、CSS3的应用，现代网页更加美观，交互效果显著，功能更加强大。 ​ 学习web前端开发基础技术需要掌握：HTML、CSS、JavaScript语言。 HTML是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。 CSS样式是表现。比如标题字体、颜色变化或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。 JavaScript是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有焦点新闻（新闻图片）的轮换。可以这么理解，有动画的，有交互的一般都是用JavaScript来实现的。 3 web服务本质 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"前端","slug":"前端","permalink":"https://qianlongshenyong.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://qianlongshenyong.github.io/tags/前端/"}]},{"title":"搭建自己的博客","slug":"搭建自己的博客","date":"2019-06-22T16:00:00.000Z","updated":"2019-06-29T07:06:58.693Z","comments":true,"path":"2019/06/23/搭建自己的博客/","link":"","permalink":"https://qianlongshenyong.github.io/2019/06/23/搭建自己的博客/","excerpt":"前言：技术：Hexo+github 好处： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 准备工作： 有一个github账号，没有的话去注册一个； 安装了node.js、npm，并了解相关基础知识； 安装了git for windows（或者其它git客户端） 搭建github博客创建仓库 登录github账号后新创建一格式为：你的用户名.github.io 比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了 点击Settings设置，然后往下拉，找到github pages，点击choose a theme选择喜欢主题 在浏览器输入 用户名.github.io访问自己博客 绑定域名配置SSH key","text":"前言：技术：Hexo+github 好处： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 准备工作： 有一个github账号，没有的话去注册一个； 安装了node.js、npm，并了解相关基础知识； 安装了git for windows（或者其它git客户端） 搭建github博客创建仓库 登录github账号后新创建一格式为：你的用户名.github.io 比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了 点击Settings设置，然后往下拉，找到github pages，点击choose a theme选择喜欢主题 在浏览器输入 用户名.github.io访问自己博客 绑定域名配置SSH key hexohexo简介Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。 官网： http://hexo.iogithub: https://github.com/hexojs/hexo 原理​ 由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 hexo常用命令12345678910111213141516171819hexo g # 生成hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的hexo s # 开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容hexo clean #清理public的内容，然后再来重新生成和发布hexo d # 上传hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本缩写：hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy组合命令：hexo s -g #生成并本地预览hexo d -g #生成并上传 注： 执行hexo d 命令之前，可能需要安装 npm install hexo-deployer-git –save 在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 hexo环境搭建： 安装git 安装nodejs 创建存放hexo组件的目录，然后Git bash here 安装hexo npm install hexo -g hexo -v，检查hexo是否安装成功 初始化文件夹 hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： npm install 安装所需要的组件 将Hexo于Github page 联系起来，设置Git的user name 和email git config --global user.name \"qianlongshenyong\" git config --global user.email\"1320005085@qq.com\" 修改 D:\\blog\\_config.yml 并保存 hexo s 启动服务，在本地4000端口开启服务 在浏览器输入127.0.0.1:4000访问博客主页 使用Hexo修改博客主题操作步骤 选择博客主题https://hexo.io/themes/ 选择tomotoes主题 复制主题链接， D:\\blog\\themes,右键选择git bash here 下载所选主题git clone https://github.com/Tomotoes/hexo-theme-tomotoes.git 修改主题名称为tomotoes 修改 D:\\blog\\_config.yml 中theme并保存 然后在==blog目录==下打开git输入hexo s，本地预览效果. 修改主题配置按照https://github.com/Tomotoes/hexo-theme-tomotoes.git有部署文档 依赖安装还是在 Hexo 根目录，如果以下插件已安装过，无需再次安装。 Less主题默认使用 less 作为 css 预处理工具。 1$ npm install hexo-renderer-less --save Feed用于生成 rss。 1$ npm install hexo-generator-feed --save Json-content用于生成静态站点数据，用作站内搜索的数据源。 1$ npm install hexo-generator-json-content --save QRCode用于生成微信分享二维码。 1$ npm install hexo-helper-qrcode --save hexo-wordcount用来显示文章更多信息，比如：字数，阅读时间 1npm install hexo-wordcount --save hexo-abbrlink文章唯一链接，有利于SEO，主题脚本也对其有依赖 1npm install hexo-abbrlink --save hexo-filter-github-emojisEmoji插件，让文章更生动 1npm install hexo-filter-github-emojis --save 安装完成后再次运行hexo s 开启页面标签页1hexo new page tags 修改 hexo/source/tags/index.md 的元数据 12layout: tagscomments: false 分类页1hexo new page categories 修改 hexo/source/categories/index.md 的元数据 12layout: categoriescomments: false 关于页1hexo new page about 修改 hexo/source/about/index.md 的元数据 123layout: aboutcomments: truereward: false 根据需求修改主题的配置 修改 `D:\\blog_config.yml 1234567title: subtitle:description:keywords:author: peteremial: 1320005085@qq.comurl: 保存预览 npm install –save hexo-deployer-git hexo d –g 关于_config.ymlhexo的_config.yml站点配置文件，也就是站点根目录下的_config.yml配置文件 主题的_config.yml主题配置文件，位于theme文件夹中对应主题的文件夹下的_config.yml。 设置主页的Menu设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，它将用于匹配图标以及翻译。 菜单示例配置 1234567menu: home: / archives: /archives #about: /about #categories: /categories tags: /tags #commonweal: /404.html 参考：https://blog.csdn.net/tonydandelion2014/article/details/61615898 hexo写博客配置完之后，有两种方法写博客。 方法1 通过hexo命令定位到blog目录下，执行hexo new 'my-first-blog'hexo会帮我们在_posts下生成相关md文件,我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 方法2 自己创建md文件通过typora等md编辑器自己创建md文件，但是必须符合以下开头。 12345678910---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---注:冒号后面必须要有空格 这是yaml语法的规定 其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。 hexo new page 'postName'命令和hexo new 'postName'有什么区别呢 最终部署时生成：hexo\\public\\my-second-blog\\index.html，但是它不会作为文章出现在博文目录。 如何让博文列表不显示全部内容默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？ 答案是在合适的位置加上即可，例如： 图片设置问题解决方式是使用CodeFalling/hexo-asset-image插件。 1. post_asset_folder首先确认_config.yml中有post_asset_folder:true。 Hexo提供了一种更方便管理Asset的设定：post_asset_folder 当您设置post_asset_folder为true参数后，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹；以前的文章也可以自己手动创建同名文件夹。 2. 安装 hexo-asset-image在hexo的目录下执行 1npm install https://github.com/CodeFalling/hexo-asset-image --save 3. 使用完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。结构如下： 123本地图片测试├── logo.jpg本地图片测试.md 这样的目录结构（目录名和文章名一致），只要使用 1![](本地图片测试/logo.jpg) 就可以插入图片。其中[]里面不写文字则没有图片标题。 生成的结构为 123public/2016/3/9/本地图片测试 ├── index.html ├── logo.jpg 同时，生成的 html 是 1![](/2016/3/9/本地图片测试/logo.jpg) 而不是愚蠢的 1![](本地图片测试/logo.jpg) 个人喜欢typora编辑器，在偏好设置中将图片插入设置为如下：然后只需将后缀.assets删除，即可与hexo文件夹名称相同。 常见问题： 输入hexo d –g 提示找不到git 解决办法：npm install –save hexo-deployer-git 点击主页或者归档显示找不到页面 解决办法：主题设置中有关于开启页面的指令 图片显示不出来问题 解决办法：采用CodeFalling/hexo-asset-image 参考： https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#hexo%E7%AE%80%E4%BB%8B https://blog.csdn.net/sinat_37781304/article/details/82729029 https://foxgrin.github.io/posts/29757/ https://blog.annieyu.com/posts/3333782006.html document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"工具","slug":"工具","permalink":"https://qianlongshenyong.github.io/categories/工具/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://qianlongshenyong.github.io/tags/Hexo/"}]}]}