<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>潜龙慎用</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qianlongshenyong.github.io/"/>
  <updated>2019-07-08T06:33:18.271Z</updated>
  <id>https://qianlongshenyong.github.io/</id>
  
  <author>
    <name>潜龙慎用</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端之HTML</title>
    <link href="https://qianlongshenyong.github.io/2019/07/07/%E5%89%8D%E7%AB%AF%E4%B9%8BHTML/"/>
    <id>https://qianlongshenyong.github.io/2019/07/07/前端之HTML/</id>
    <published>2019-07-07T08:38:17.000Z</published>
    <updated>2019-07-08T06:33:18.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HTML概述"><a href="#1-HTML概述" class="headerlink" title="1 HTML概述"></a>1 HTML概述</h1><ul><li>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)</li><li>HTML 不是一种编程语言，而是一种<strong>标记语言</strong> (markup language)</li><li>标记语言是一套<strong>标记标签</strong> (markup tag)</li><li>HTML 使用<strong>标记标签</strong>来描述网页</li><li>HTML是一个标准,规定了大家怎么写网页.</li><li><strong>HTML基本概念</strong></li></ul><h2 id="1-1标签"><a href="#1-1标签" class="headerlink" title="1.1标签"></a>1.1标签</h2><ul><li><p>HTML 标签是由尖括号包围的关键词，比如 <html></p></li><li><p>HTML 标签通常是成对出现的，标签对中的第一个标签是开始标签，第二个标签是结束标签</p><p><img src="/2019/07/07/前端之HTML/HTML%E6%A0%87%E7%AD%BE.jpg" alt="HTML标签"></p></li><li><p>标签与标签之间是可以嵌套的，但先后顺序必须保持一致，如：<div>里嵌套<p>，那么</p>必须放在</div>的前面。</p></li></ul><h2 id="1-2元素"><a href="#1-2元素" class="headerlink" title="1.2元素"></a>1.2元素</h2><p>HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。</p><h3 id="1-2-1-嵌套的-HTML-元素"><a href="#1-2-1-嵌套的-HTML-元素" class="headerlink" title="1.2.1 嵌套的 HTML 元素"></a>1.2.1 嵌套的 HTML 元素</h3><p>大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素）。</p><p>HTML 文档由嵌套的 HTML 元素构成。</p><h3 id="1-2-2-html元素"><a href="#1-2-2-html元素" class="headerlink" title="1.2 .2 html元素"></a>1.2 .2 html元素</h3><p><img src="/2019/07/07/前端之HTML/1562546413301.png" alt="1562546413301"></p><p><code><html></html></code>是说明这个是一个网页。告诉浏览器这个网页的开始和结束。他包含了之后的两个元素。<code><head></code>和<code></head></code>|<code><body></code>和<code></body></code></p><p><code><html></code> 元素定义了整个 HTML 文档。</p><p>这个元素拥有一个开始标签 <code><html></code>，以及一个结束标签 <code></html></code>。</p><p>元素内容是另一个 HTML 元素（body 元素）和（head 元素）</p><h3 id="1-2-3-head-元素："><a href="#1-2-3-head-元素：" class="headerlink" title="1.2.3  head 元素："></a>1.2.3  head 元素：</h3><p><img src="/2019/07/07/前端之HTML/1562546438705.png" alt="1562546438705"></p><p>head>和<code></head></code>之间的内容，是元信息和网站的标题 元信息一般是不显示出来的,但是记录了你这个HTML文件的很多有用的信息</p><h3 id="1-2-4-body元素："><a href="#1-2-4-body元素：" class="headerlink" title="1.2.4 body元素："></a>1.2.4 body元素：</h3><p><img src="/2019/07/07/前端之HTML/1562546480779.png" alt="1562546480779"></p><p><code><body></code>和<code></body></code>之间的内容，是浏览器呈现出来的，用户看到的页面效果。也就是说这里是网页的主体。也就是body的身体之意</p><h3 id="1-2-5-段落-元素"><a href="#1-2-5-段落-元素" class="headerlink" title="1.2.5 段落 元素"></a>1.2.5 段落 元素</h3><p><img src="/2019/07/07/前端之HTML/1562546498976.png" alt="1562546498976"></p><p>这个 <code><p></code> 元素定义了 HTML 文档中的一个段落。</p><p>这个元素拥有一个开始标签<code><p></code>，以及一个结束标签 <code></p></code>。</p><p>元素内容是：This is my first paragraph。</p><h3 id="1-2-6-空的-HTML-元素"><a href="#1-2-6-空的-HTML-元素" class="headerlink" title="1.2.6  空的 HTML 元素"></a>1.2.6  空的 HTML 元素</h3><p>没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。</p><p><code><br></code> 就是没有关闭标签的空元素.</p><h2 id="1-3属性"><a href="#1-3属性" class="headerlink" title="1.3属性"></a>1.3属性</h2><p>HTML 标签可以拥有<em>属性</em>。属性提供了有关 HTML 元素的<em>更多的信息</em>。</p><p>属性总是以名称/值对的形式出现，比如：<em>name=”value”</em>。</p><p>属性总是在 HTML 元素的<em>开始标签</em>中规定</p><p>HTML 提示：使用小写标签</p><p>HTML 标签对大小写不敏感：<code><P></code> 等同于<code><p></code>。许多网站都使用大写的 HTML 标签。</p><p><strong>几个重要的属性：</strong></p><ul><li>id：定义标签的唯一ID，HTML文档树中唯一</li><li>class：为html元素定义一个或多个类名（classname）(CSS样式类名)</li><li>style：规定元素的行内样式（CSS样式）</li></ul><h1 id="2-HTML-文档-网页"><a href="#2-HTML-文档-网页" class="headerlink" title="2 HTML 文档 = 网页"></a>2 HTML 文档 = 网页</h1><ul><li>HTML 文档<em>描述网页</em></li><li>HTML 文档<em>包含 HTML 标签</em>和纯文本</li><li>HTML 文档也被称为<em>网页</em></li></ul><p>Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容：</p><p><img src="/2019/07/07/前端之HTML/1562546549801.png" alt="1562546549801"></p><p>==<strong>学HTML主要是学标签</strong>==</p><h1 id="3-HTML-标签分类"><a href="#3-HTML-标签分类" class="headerlink" title="3 HTML 标签分类"></a>3 HTML 标签分类</h1><p>标签可以理解为<标签名></p><p>标签的分类：</p><ol><li><p>单标签和双标签</p></li><li><p>块级标签和内联标签</p><p>块级标签：默认占浏览器长度，可以设置长和宽 <code>h1~h6  div  p  hr（水平线）</code></p><p>内联标签：根据内容决定长度，不能设置长和宽 <code>a img  u s b span i</code> </p><p>块级元素与行内元素的区别：<br>所谓块元素，是以另起一行开始渲染的元素，行内元素则不需另起一行。如果单独在网页中插入这两个元素，不会对页面产生任何的影响。<br>这两个元素是专门为定义CSS样式而生的。</p></li><li><p>展示标签和交互标签</p></li><li><p>标签的语法：</p><ul><li><标签名 属性1=“属性值1” 属性2=“属性值2”……>内容部分</标签名></li><li><标签名 属性1=“属性值1” 属性2=“属性值2”…… /></li></ul></li></ol><h1 id="4-HTML文件结构："><a href="#4-HTML文件结构：" class="headerlink" title="4 HTML文件结构："></a>4 HTML文件结构：</h1><p><img src="/2019/07/07/前端之HTML/1562546616796.png" alt="1562546616796"></p><p>注：使用pycharm创建一个html文件，会自动补全</p><p><img src="/2019/07/07/前端之HTML/1562546633475.png" alt="1562546633475"></p><p>一个简单的 HTML 文档，带有最基本的必需的元素：</p><p><img src="/2019/07/07/前端之HTML/1562546648497.png" alt="1562546648497"></p><h1 id="5-HTML-常用标签"><a href="#5-HTML-常用标签" class="headerlink" title="5 HTML 常用标签"></a>5 HTML 常用标签</h1><h2 id="5-1-HTML注释"><a href="#5-1-HTML注释" class="headerlink" title="5.1 HTML注释"></a>5.1 HTML注释</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><!--注释内容--></span><br></pre></td></tr></tbody></table></figure><h2 id="5-2-lt-DOCTYPE-gt-标签"><a href="#5-2-lt-DOCTYPE-gt-标签" class="headerlink" title="5.2 <!DOCTYPE> 标签"></a>5.2 <!DOCTYPE> 标签</h2><p><code><!DOCTYPE> 声明必须是 HTML 文档的第一行，位于 <html> 标签之前。</code></p><p><code><!DOCTYPE> 声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。</code></p><p>doctype告诉浏览器使用什么样的html或xhtml规范来解析html文档</p><p>HTML语言需要一个标准，当我们在第一行指定了<code><!DOCTYPE html></code>的时候，当浏览器去访问我们的代码的时候就就按照HTML代码里指定的标准去读取和渲染给我们展现的页面。 </p><h2 id="5-3-头部标签-lt-head-gt"><a href="#5-3-头部标签-lt-head-gt" class="headerlink" title="5.3 头部标签 <head>"></a>5.3 头部标签 <code><head></code></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><head> 标签用于定义文档的头部，它是所有头部元素的容器。文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</span><br></pre></td></tr></tbody></table></figure><p>下面这些标签可用在 head 部分:</p><table><thead><tr><th>标签</th><th>意义</th></tr></thead><tbody><tr><td><code><title></title></code></td><td>定义网页标题</td></tr><tr><td><code><style></style></code></td><td>定义内部样式表</td></tr><tr><td><code><script></script></code></td><td>定义JS代码或引入外部JS文件</td></tr><tr><td><code><link/></code></td><td>引入外部样式表文件</td></tr><tr><td><code><meta/></code></td><td>定义网页原信息(给浏览器看的)</td></tr></tbody></table><p>注：</p><ol><li>单标签：==/==可以加也可以不加</li><li><code><title> 定义文档的标题，它是 head 部分中唯一必需的元素。</code></li><li>chrom浏览器 查看网页的三种方法：<ol><li>鼠标右键 查看网页源码</li><li>快捷键<code>ctrl+u</code></li><li><code>F12</code></li></ol></li></ol><h3 id="5-3-1-Meta标签"><a href="#5-3-1-Meta标签" class="headerlink" title="5.3.1 Meta标签"></a>5.3.1 Meta标签</h3><p>Meta标签介绍：提供有关页面的元信息，例：页面编码、刷新、跳转、针对搜索引擎和更新频度的描述和关键词</p><p><code><meta></code>元素可提供有关页面的元信息（mata-information）,针对搜索引擎和更新频度的描述和关键词。</p><p><code><meta></code>标签位于文档的头部，不包含任何内容。</p><p><code><meta></code>提供的信息是用户不可见的。</p><p>meta标签的组成：meta标签共有两个属性，它们分别是http-equiv属性和name 属性，不同的属性又有不同的参数值，这些不同的参数值就实现了不同的网页功能。 </p><ol><li>http-equiv属性：相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。</li></ol><p><img src="/2019/07/07/前端之HTML/1562546696176.png" alt="1562546696176"></p><ol start="2"><li>name属性: 主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</li></ol><p><img src="/2019/07/07/前端之HTML/1562546710487.png" alt="1562546710487"></p><h3 id="5-3-2-title标签"><a href="#5-3-2-title标签" class="headerlink" title="5.3.2 title标签"></a>5.3.2 title标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">title</span>></span> 元素可定义文档的标题</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/07/前端之HTML/831021-20160128004414707-1790664709.png" alt="img"></p><h3 id="5-3-3-link-标签"><a href="#5-3-3-link-标签" class="headerlink" title="5.3.3 link 标签"></a>5.3.3 link 标签</h3><p>网页头部的图标</p><p><img src="/2019/07/07/前端之HTML/1562546735069.png" alt="1562546735069"></p><p>效果图如下</p><p><img src="/2019/07/07/前端之HTML/831021-20160128062900988-738903477.png" alt="img"></p><p>导入CSS类似python中导入模块类似</p><p><img src="/2019/07/07/前端之HTML/1562546752567.png" alt="1562546752567"></p><h3 id="5-3-4-Style"><a href="#5-3-4-Style" class="headerlink" title="5.3.4 Style"></a>5.3.4 Style</h3><p>1、在当前文件中写Css样式</p><p>2、在其他文件中写Css样式类似python的模块导入的方式把Css样式导入到当前文件中使用</p><h3 id="5-3-5-Script"><a href="#5-3-5-Script" class="headerlink" title="5.3.5 Script"></a>5.3.5 Script</h3><p>1、在当前文件中写JS</p><p>2、在其他文件中写JS类似python的模块导入的方式把JS导入到当前文件中使用</p><h2 id="5-4-body标签"><a href="#5-4-body标签" class="headerlink" title="5.4 body标签"></a>5.4 body标签</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line"></span><br><span class="line"></body></span><br></pre></td></tr></tbody></table></figure><p>body 元素定义文档的主体。</p><p>body 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。）</p><p>body里面分为两类标签：块级标签和内联标签，块级标签占用的是整行，内联标签占用的他所使用的实际大小如下图：块级别标签&内联标签 </p><p><img src="/2019/07/07/前端之HTML/831021-20160128065154582-960760506.png" alt="img"></p><p>下面这些标签常用在body标签中：</p><h3 id="5-4-1-标题标签"><a href="#5-4-1-标题标签" class="headerlink" title="5.4.1 标题标签"></a>5.4.1 标题标签</h3><p>HTML 标题（Heading）是通过<code><h1> - <h6></code>等标签进行定义的</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">h1</span>></span>标题1<span class="tag"></<span class="name">h1</span>></span></span><br><span class="line"><span class="tag"><<span class="name">h2</span>></span>标题2<span class="tag"></<span class="name">h2</span>></span></span><br><span class="line"><span class="tag"><<span class="name">h3</span>></span>标题3<span class="tag"></<span class="name">h3</span>></span></span><br><span class="line"><span class="tag"><<span class="name">h4</span>></span>标题4<span class="tag"></<span class="name">h4</span>></span></span><br><span class="line"><span class="tag"><<span class="name">h5</span>></span>标题5<span class="tag"></<span class="name">h5</span>></span></span><br><span class="line"><span class="tag"><<span class="name">h6</span>></span>标题6<span class="tag"></<span class="name">h6</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-2-段落标签"><a href="#5-4-2-段落标签" class="headerlink" title="5.4.2 段落标签"></a>5.4.2 段落标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">p</span>></span>段落标签<span class="tag"></<span class="name">p</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-3-表格标签"><a href="#5-4-3-表格标签" class="headerlink" title="5.4.3 表格标签"></a>5.4.3 表格标签</h3><p> 格是一个二维数据空间，一个表格由若干行组成，一个行又有若干单元格组成，单元格里可以包含文字、列表、图案、表单、数字符号、预置文本和其它的表格等内容。<br>表格最重要的目的是显示表格类数据。表格类数据是指最适合组织为表格格式（即按行和列组织）的数据。<br>表格的基本结构：包括thead 和tbody</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">table</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">thead</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">tr</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">th</span>></span>序号<span class="tag"></<span class="name">th</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">th</span>></span>姓名<span class="tag"></<span class="name">th</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">th</span>></span>爱好<span class="tag"></<span class="name">th</span>></span></span><br><span class="line">  <span class="tag"></<span class="name">tr</span>></span></span><br><span class="line">  <span class="tag"></<span class="name">thead</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">tbody</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">tr</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">td</span>></span>1<span class="tag"></<span class="name">td</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">td</span>></span>Egon<span class="tag"></<span class="name">td</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">td</span>></span>蓝球<span class="tag"></<span class="name">td</span>></span></span><br><span class="line">  <span class="tag"></<span class="name">tr</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">tr</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">td</span>></span>2<span class="tag"></<span class="name">td</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">td</span>></span>Yuan<span class="tag"></<span class="name">td</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">td</span>></span>足球<span class="tag"></<span class="name">td</span>></span></span><br><span class="line">  <span class="tag"></<span class="name">tr</span>></span></span><br><span class="line">  <span class="tag"></<span class="name">tbody</span>></span></span><br><span class="line"><span class="tag"></<span class="name">table</span>></span></span><br></pre></td></tr></tbody></table></figure><p>属性:</p><ul><li>border: 表格边框.</li><li>cellpadding: 内边距</li><li>cellspacing: 外边距.</li><li>width: 像素 百分比.（最好通过css来设置长宽）</li><li>rowspan: 单元格竖跨多少行</li><li>colspan: 单元格横跨多少列（即合并单元格</li></ul><h3 id="5-4-4-换行标签"><a href="#5-4-4-换行标签" class="headerlink" title="5.4.4 换行标签"></a>5.4.4 换行标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">br</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-5-div标签"><a href="#5-4-5-div标签" class="headerlink" title="5.4.5 div标签"></a>5.4.5 div标签</h3><p>div标签用来定义一个块级元素，并无实际的意义。主要通过CSS样式为其赋予不同的表现。</p><h3 id="5-4-6-span标签"><a href="#5-4-6-span标签" class="headerlink" title="5.4.6 span标签"></a>5.4.6 span标签</h3><p>span标签用来定义内联(行内)元素，并无实际的意义。主要通过CSS样式为其赋予不同的表现。</p><h3 id="5-4-7-链接-a-标签"><a href="#5-4-7-链接-a-标签" class="headerlink" title="5.4.7 链接(a)标签"></a>5.4.7 链接(a)标签</h3><p>超链接标签</p><p>所谓的超链接是指从一个网页指向一个目标的连接关系，这个目标可以是另一个网页，也可以是相同网页上的不同位置，还可以是一个图片，一个电子邮件地址，一个文件，甚至是一个应用程序。</p><p><code>target="_blank"</code>在另一个标签页打开一个新的，不加的话，<code>target="_self"</code>在当前标签页，默认跳转到另一个。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"://www.oldboyedu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> ></span>点我<span class="tag"></<span class="name">a</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-8-图像-img-标签"><a href="#5-4-8-图像-img-标签" class="headerlink" title="5.4.8 图像(img)标签"></a>5.4.8 图像(img)标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图片的路径"</span> <span class="attr">alt</span>=<span class="string">"图片未加载成功时的提示"</span> <span class="attr">title</span>=<span class="string">"鼠标悬浮时提示信息"</span> <span class="attr">width</span>=<span class="string">"宽"</span> <span class="attr">height</span>=<span class="string">"高(宽高两个属性只用一个会自动等比缩放)"</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-9-水平线标签"><a href="#5-4-9-水平线标签" class="headerlink" title="5.4.9 水平线标签"></a>5.4.9 水平线标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">hr</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-10-加粗标签"><a href="#5-4-10-加粗标签" class="headerlink" title="5.4.10 加粗标签"></a>5.4.10 加粗标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">b</span>></span>加粗<span class="tag"></<span class="name">b</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-11-斜体标签"><a href="#5-4-11-斜体标签" class="headerlink" title="5.4.11 斜体标签"></a>5.4.11 斜体标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">i</span>></span>斜体<span class="tag"></<span class="name">i</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-12-下划线标签"><a href="#5-4-12-下划线标签" class="headerlink" title="5.4.12 下划线标签"></a>5.4.12 下划线标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">u</span>></span>下划线<span class="tag"></<span class="name">u</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-13-删除标签"><a href="#5-4-13-删除标签" class="headerlink" title="5.4.13 删除标签"></a>5.4.13 删除标签</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><s>删除</s></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-14特殊符号"><a href="#5-4-14特殊符号" class="headerlink" title="5.4.14特殊符号"></a>5.4.14特殊符号</h3><p><img src="/2019/07/07/前端之HTML/../../%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86./%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7.png" alt="特殊符号"></p><h3 id="5-4-15列表标签"><a href="#5-4-15列表标签" class="headerlink" title="5.4.15列表标签"></a>5.4.15列表标签</h3><ol><li><p>无序列表</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"disc"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">li</span>></span>第一项<span class="tag"></<span class="name">li</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">li</span>></span>第二项<span class="tag"></<span class="name">li</span>></span></span><br><span class="line"><span class="tag"></<span class="name">ul</span>></span></span><br></pre></td></tr></tbody></table></figure><p>type属性：</p><ul><li>disc（实心圆点，默认值）</li><li>circle（空心圆圈）</li><li>square（实心方块）</li><li>none（无样式）</li></ul></li><li><p>有序列表</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"1"</span> <span class="attr">start</span>=<span class="string">"2"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">li</span>></span>第一项<span class="tag"></<span class="name">li</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">li</span>></span>第二项<span class="tag"></<span class="name">li</span>></span></span><br><span class="line"><span class="tag"></<span class="name">ol</span>></span></span><br></pre></td></tr></tbody></table></figure><p>type属性：</p><ul><li>1 数字列表，默认值</li><li>A 大写字母</li><li>a 小写字母</li><li>Ⅰ大写罗马</li><li>ⅰ小写罗马</li></ul></li><li><p>标题列表</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">dl</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">dt</span>></span>标题1<span class="tag"></<span class="name">dt</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">dd</span>></span>内容1<span class="tag"></<span class="name">dd</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">dt</span>></span>标题2<span class="tag"></<span class="name">dt</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">dd</span>></span>内容1<span class="tag"></<span class="name">dd</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">dd</span>></span>内容2<span class="tag"></<span class="name">dd</span>></span></span><br><span class="line"><span class="tag"></<span class="name">dl</span>></span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="6-标签嵌套规则"><a href="#6-标签嵌套规则" class="headerlink" title="6 标签嵌套规则"></a>6 标签嵌套规则</h2><ol><li>行内标签不能嵌套块级标签</li><li>p标签不能嵌套块级标签</li></ol><h2 id="7-form-标签"><a href="#7-form-标签" class="headerlink" title="7 form 标签"></a>7 form 标签</h2><p>form标签可以看做是一个容器。</p><p>表单用于向服务器传输数据，从而实现用户与Web服务器的交互，</p><p>表单能够包含input系列标签，比如文本字段、复选框、单选框、提交按钮等等。</p><p>表单还可以包含textarea、select、fieldset和 label标签。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>accept-charset</td><td>规定在被提交表单中使用的字符集（默认：页面字符集）。</td></tr><tr><td>action</td><td>规定向何处提交表单的地址（URL）（提交页面）。</td></tr><tr><td>autocomplete</td><td>规定浏览器应该自动完成表单（默认：开启）。 自动补全功能！</td></tr><tr><td>enctype</td><td>规定被提交数据的编码（默认：url-encoded）。</td></tr><tr><td>method</td><td>规定在提交表单时所用的 HTTP 方法（默认：GET）。</td></tr><tr><td>name</td><td>规定识别表单的名称（对于 DOM 使用：document.forms.name）。</td></tr><tr><td>novalidate</td><td>规定浏览器不验证表单。</td></tr><tr><td>target</td><td>规定 action 属性中地址的目标（默认：_self）</td></tr></tbody></table><p>form 表单提交数据的几个注意事项：</p><ol><li>可以有多个form标签</li><li>所有获取用户输入的标签都必须放在form表单中</li><li>action=“ ” 控制往哪提交</li><li>input，select，textarea 里面都需要有name属性—-> 用于后端进行获取数据！</li><li>必须要有提交按钮</li><li>put get 区别：</li></ol><h3 id="7-1-input标签"><a href="#7-1-input标签" class="headerlink" title="7.1 input标签"></a>7.1 input标签</h3><p>   <input> 标签用于搜集用户信息。</p><p>根据不同的 type 属性值，输入字段拥有很多种形式。输入字段可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等等。</p><table><thead><tr><th>type属性值</th><th>表现形式</th><th>对应代码</th></tr></thead><tbody><tr><td>text</td><td>单行输入文本</td><td><input type=text” /></td></tr><tr><td>password</td><td>密码输入框</td><td><code><input type="password"  /></code></td></tr><tr><td>date</td><td>日期输入框</td><td><code><input type="date" /></code></td></tr><tr><td>checkbox</td><td>复选框</td><td><code><input type="checkbox" checked="checked"  /></code></td></tr><tr><td>radio</td><td>单选框</td><td><code><input type="radio"  /></code></td></tr><tr><td>submit</td><td>提交按钮</td><td><code><input type="submit" value="提交" /></code></td></tr><tr><td>reset</td><td>重置按钮</td><td><code><input type="reset" value="重置"  /></code></td></tr><tr><td>button</td><td>普通按钮</td><td><code><input type="button" value="普通按钮"  /></code></td></tr><tr><td>hidden</td><td>隐藏输入框</td><td><code><input type="hidden"  /></code></td></tr><tr><td>file</td><td>文本选择框</td><td><code><input type="file"  /></code></td></tr></tbody></table><p>注：button多用js给绑定事件</p><h3 id="7-2-select-标签"><a href="#7-2-select-标签" class="headerlink" title="7.2 select 标签"></a>7.2 select 标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">id</span>=<span class="string">"city"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>></span>北京<span class="tag"></<span class="name">option</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">option</span> <span class="attr">selected</span>=<span class="string">"selected"</span> <span class="attr">value</span>=<span class="string">"2"</span>></span>上海<span class="tag"></<span class="name">option</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>></span>广州<span class="tag"></<span class="name">option</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>></span>深圳<span class="tag"></<span class="name">option</span>></span></span><br><span class="line">  <span class="tag"></<span class="name">select</span>></span></span><br><span class="line"><span class="tag"></<span class="name">form</span>></span></span><br></pre></td></tr></tbody></table></figure><p>属性说明：</p><ul><li>multiple：布尔属性，设置后为多选，否则默认单选</li><li>disabled：禁用</li><li>selected：默认选中该项</li><li>value：定义提交时的选项值、</li></ul><p>6.2.1 option标签</p><p>option 元素定义下拉列表中的一个选项（一个条目）。</p><p>浏览器将<code><option></code>标签中的内容作为 <code><select></code> 标签的菜单或是滚动列表中的一个元素显示。</p><p>option 元素位于 select 元素内部。</p><p><strong>注释：</strong><code><option></code> 标签可以在不带有任何属性的情况下使用，但是您通常需要使用 value 属性，此属性会指示出被送往服务器的内容。</p><p><strong>注释：</strong>请与 select 元素配合使用此标签，否则这个标签是没有意义的。</p><p>6.2.2 optgroup标签</p><p><code><optgroup></code>标签定义选项组。</p><p>optgroup 元素用于组合选项。当您使用一个长的选项列表时，对相关的选项进行组合会使处理更加容易。</p><p>必需的属性：label  可选属性：disabled</p><h3 id="7-3-textarea多行文本标签"><a href="#7-3-textarea多行文本标签" class="headerlink" title="7.3 textarea多行文本标签"></a>7.3 textarea多行文本标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"memo"</span> <span class="attr">id</span>=<span class="string">"memo"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>></span></span><br><span class="line">  默认内容</span><br><span class="line"><span class="tag"></<span class="name">textarea</span>></span></span><br></pre></td></tr></tbody></table></figure><p>比如：个人简介</p><p>属性说明：</p><ul><li>name：名称</li><li>rows：行数</li><li>cols：列数</li><li>disabled：禁用</li></ul><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://www.cnblogs.com/luotianshuai/p/5159449.html" target="_blank" rel="noopener">https://www.cnblogs.com/luotianshuai/p/5159449.html</a></p><p><a href="https://www.cnblogs.com/liwenzhou/p/7988087.html" target="_blank" rel="noopener">https://www.cnblogs.com/liwenzhou/p/7988087.html</a></p><p><a href="https://www.jianshu.com/p/19cd9400a917" target="_blank" rel="noopener">https://www.jianshu.com/p/19cd9400a917</a></p><p><a href="https://blog.csdn.net/mdxiaohu/article/details/81318643" target="_blank" rel="noopener">https://blog.csdn.net/mdxiaohu/article/details/81318643</a></p><p><a href="http://www.w3school.com.cn/html/index.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/html/index.asp</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-HTML概述&quot;&gt;&lt;a href=&quot;#1-HTML概述&quot; class=&quot;headerlink&quot; title=&quot;1 HTML概述&quot;&gt;&lt;/a&gt;1 HTML概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;HTML 指的是超文本标记语言 (&lt;strong&gt;H&lt;/strong&gt;yper 
      
    
    </summary>
    
      <category term="前端" scheme="https://qianlongshenyong.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://qianlongshenyong.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端</title>
    <link href="https://qianlongshenyong.github.io/2019/07/07/%E5%89%8D%E7%AB%AF/"/>
    <id>https://qianlongshenyong.github.io/2019/07/07/前端/</id>
    <published>2019-07-07T08:21:01.000Z</published>
    <updated>2019-07-07T09:21:43.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>​    编程就是跟数据打交道，我们需要处理数据，存储数据，展示数据。什么是前端，为什么学前端。</p><h1 id="2-web前端概述"><a href="#2-web前端概述" class="headerlink" title="2 web前端概述"></a>2 web前端概述</h1><p>​    web前端开发是从网页制作演变而来。在互联网的演化进程中，网页制作是Web 1.0时代的产物，早期网站主要内容都是静态，以图片和文字为主，用户使用网站的行为也以浏览为主。随着互联网技术的发展和HTML5、CSS3的应用，现代网页更加美观，交互效果显著，功能更加强大。</p><p>​    学习web前端开发基础技术需要掌握：HTML、CSS、JavaScript语言。</p><ol><li>HTML是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。</li><li>CSS样式是表现。比如标题字体、颜色变化或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。</li><li>JavaScript是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有焦点新闻（新闻图片）的轮换。可以这么理解，有动画的，有交互的一般都是用JavaScript来实现的。</li></ol><p><img src="/2019/07/07/前端/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%B8%89%E9%83%A8%E5%88%86.png" alt="前端基础三部分"></p><p><img src="/2019/07/07/前端/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9.png" alt="前端基础内容"></p><h1 id="3-web服务本质"><a href="#3-web服务本质" class="headerlink" title="3 web服务本质"></a>3 web服务本质</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h1&gt;&lt;p&gt;​    编程就是跟数据打交道，我们需要处理数据，存储数据，展示数据。什么是前端，为什么学前端。&lt;/p&gt;
&lt;h1 id=&quot;2
      
    
    </summary>
    
      <category term="前端" scheme="https://qianlongshenyong.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://qianlongshenyong.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>django基本流程</title>
    <link href="https://qianlongshenyong.github.io/2019/07/03/Django%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/"/>
    <id>https://qianlongshenyong.github.io/2019/07/03/Django基本流程/</id>
    <published>2019-07-03T08:21:01.000Z</published>
    <updated>2019-07-07T09:47:19.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-设计表结构"><a href="#1-设计表结构" class="headerlink" title="1 设计表结构"></a>1 设计表结构</h1><p><img src="/2019/07/03/Django基本流程/1562133052512.png" alt="1562133052512"></p><p>注：mysql的安装与使用 </p><h1 id="2-配置数据库"><a href="#2-配置数据库" class="headerlink" title="2 配置数据库"></a>2 配置数据库</h1><h2 id="2-1-默认SQLite数据库"><a href="#2-1-默认SQLite数据库" class="headerlink" title="2.1 默认SQLite数据库"></a>2.1 默认SQLite数据库</h2><p>打开<code>mysite/settings.py</code>配置文件，这是整个Django项目的设置中心。Django默认使用SQLite数据库，因为Python源生支持SQLite数据库，所以你无须安装任何程序，就可以直接使用它。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.2/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = {</span><br><span class="line">    <span class="string">'default'</span>: {</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果你想使用其他的数据库，请先安装相应的数据库操作模块，并将settings文件中DATABASES位置的<code>’default’</code>的键值进行相应的修改，用于连接你的数据库。其中：</p><ul><li>ENGINE（引擎）：可以是<code>django.db.backends.sqlite3</code>、<code>django.db.backends.postgresql</code>、<code>django.db.backends.mysql</code>、<code>django.db.backends.oracle</code>，当然其它的也行。</li><li>NAME（名称）：类似Mysql数据库管理系统中用于保存项目内容的数据库的名字。如果你使用的是默认的SQLite，那么数据库将作为一个文件将存放在你的本地机器内，此时的NAME应该是这个文件的完整绝对路径包括文件名，默认值<code>os.path.join(BASE_DIR, ’db.sqlite3’)</code>，将把该文件储存在你的项目目录下。</li></ul><h2 id="2-2-更换其他数据库"><a href="#2-2-更换其他数据库" class="headerlink" title="2.2 更换其他数据库"></a>2.2 更换其他数据库</h2><p>注：如果你不是使用默认的SQLite数据库，那么一些诸如USER，PASSWORD和HOST的参数必须手动指定！mysql 示例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite/settings.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql         <span class="comment"># 一定要添加这两行！通过pip install pymysql！</span></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"><span class="comment">#因为Django连接MySQL时默认使用MySQLdb驱动，但MySQLdb不支持Python3，因此这里将MySQL</span></span><br><span class="line"><span class="comment">#驱动设置为pymysql。</span></span><br><span class="line"></span><br><span class="line">DATABASES = {</span><br><span class="line">    <span class="string">'default'</span>: {</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'mysite'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'192.168.1.1'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'pwd'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：</p><ul><li>在使用非SQLite的数据库时，请务必预先在数据库管理系统的提示符交互模式下创建数据库，你可以使用命令：<code>CREATE DATABASE database_name;</code> Django不会自动帮你做这一步工作。</li><li>确保你在settings文件中提供的数据库用户具有创建数据库表的权限，因为在接下来的教程中，我们需要自动创建一个test数据表。（在实际项目中也需要确认这一条要求。）</li><li>如果你使用的是SQLite，那么你无需做任何预先配置，直接使用就可以了。</li></ul><p><img src="/2019/07/03/Django基本流程/1562133768975.png" alt="1562133768975"></p><h2 id="2-3-错误"><a href="#2-3-错误" class="headerlink" title="2.3 错误"></a>2.3 错误</h2><p>错误1：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">No module named 'MySQLdb'</span><br><span class="line"></span><br><span class="line">原因：python3连接MySQL不能再使用mysqldb，取而代之的是pymysql。</span><br><span class="line"></span><br><span class="line">解决方法：在python的MySQL包中，即路径：C:\Users\adong\AppData\Local\Programs\Python\Python36\Lib\site-packages\Django-2.0.3-py3.6.egg\django\db\backends\mysql</span><br><span class="line">下的__init__.py文件中加入：</span><br><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></tbody></table></figure><p>错误2：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.3 or newer is required; you have 0.7.11.None</span><br><span class="line"></span><br><span class="line">原因：在解决了错误一以后出现了此错误。</span><br><span class="line"></span><br><span class="line">解决方法：在python的MySQL包中，即路径：C:\Users\adong\AppData\Local\Programs\Python\Python36\Lib\site-packages\Django-2.0.3-py3.6.egg\django\db\backends\mysql</span><br><span class="line">下的 base.py 文件中，注释掉一下两行代码：</span><br><span class="line"></span><br><span class="line">if version < (1, 3, 3):</span><br><span class="line">     raise ImproperlyConfigured("mysqlclient 1.3.3 or newer is required; you have %s" % Database.__version__)</span><br></pre></td></tr></tbody></table></figure><p>错误3：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3报错：Attribute Error:str object has no attribut edecode </span><br><span class="line">错误代码：query = query.encode(errors='replace')</span><br><span class="line">解决方法：把decode改为encode即可。</span><br></pre></td></tr></tbody></table></figure><h1 id="3-创建应用"><a href="#3-创建应用" class="headerlink" title="3 创建应用"></a>3 创建应用</h1><h2 id="3-1-命令创建"><a href="#3-1-命令创建" class="headerlink" title="3.1 命令创建"></a>3.1 命令创建</h2><p>在 Django 中，每一个应用（app）都是一个 Python 包，并且遵循着相同的约定。Django 自带一个工具，可以帮你生成应用的基础目录结构。</p><p>app应用与project项目的区别：</p><ul><li>一个app实现某个功能，比如博客、公共档案数据库或者简单的投票系统；</li><li>一个project是配置文件和多个app的集合，这些app组合成整个站点；</li><li>一个project可以包含多个app；</li><li>一个app可以属于多个project！</li></ul><p>app的存放位置可以是任何地点，但是通常都将它们放在与<code>manage.py</code>脚本同级的目录下，这样方便导入文件</p><p>进入mysite项目根目录，确保与<code>manage.py</code>文件处于同一级，输入下述命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp appname</span><br></pre></td></tr></tbody></table></figure><p>系统会自动生成 polls应用的目录，其结构如下：</p><p><img src="/2019/07/03/Django基本流程/1562134753862.png" alt="1562134753862"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">appname/</span><br><span class="line">    __init__.py           ---说明app应用是一个包</span><br><span class="line">    admin.py              ---站点配置</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py             ---模型</span><br><span class="line">    tests.py</span><br><span class="line">    views.py              ---视图（url-->视图-->models取数据-->视图在将数据给模板）</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-pycharm中创建"><a href="#3-2-pycharm中创建" class="headerlink" title="3.2 pycharm中创建"></a>3.2 pycharm中创建</h2><p>在Pycharm中，没有可以创建app的图形化按钮，需要在下方的<code>Terminal</code>终端中输入命令：</p><p><code>python manage.py startapp appname</code></p><p><img src="/2019/07/03/Django基本流程/87-2.png" alt="image"></p><p>通过前面在Pycharm中创建工程的方式有个方便之处，点击Terminal后，会自动进入虚拟环境。</p><p>注：如果没有进入venv环境，则执行语句报错！</p><p><img src="/2019/07/03/Django基本流程/1562134621875.png" alt="1562134621875"></p><h1 id="4-激活应用"><a href="#4-激活应用" class="headerlink" title="4 激活应用"></a>4 激活应用</h1><p>在settings文件中顶部的<code>INSTALLED_APPS</code>设置项。它列出了所有的项目中被激活的Django应用（app）。你必须将你自定义的app注册在这里。每个应用可以被多个项目使用，并且可以打包和分发给其他人在他们的项目中使用。</p><p>默认情况，<code>INSTALLED_APPS</code>中会自动包含下列条目，它们都是Django自动生成的：</p><ul><li>django.contrib.admin：admin管理后台站点</li><li>django.contrib.auth：身份认证系统</li><li>django.contrib.contenttypes：内容类型框架</li><li>django.contrib.sessions：会话框架</li><li>django.contrib.messages：消息框架</li><li>django.contrib.staticfiles：静态文件管理框架 </li></ul><p>上面的一些应用也需要建立一些数据库表，所以在使用它们之前我们要在数据库中创建这些表，</p><p>migrate命令将遍历<code>INSTALLED_APPS</code>设置中的所有项目，在数据库中创建对应的表，并打印出每一条动作信息</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/03/Django基本流程/1562135336496.png" alt="1562135336496"></p><h1 id="5-定义模型"><a href="#5-定义模型" class="headerlink" title="5 定义模型"></a>5 定义模型</h1><p>模型本质上就是数据库表的布局，再附加一些元数据。</p><p>Django通过自定义Python类的形式来定义具体的模型，每个模型的物理存在方式就是一个Python的类Class，每个模型代表数据库中的一张表，每个类的实例代表数据表中的一行数据，类中的每个变量代表数据表中的一列字段。Django通过模型，将Python代码和数据库操作结合起来，实现对SQL查询语言的封装。也就是说，你可以不会管理数据库，可以不会SQL语言，你同样能通过Python的代码进行数据库的操作。Django通过ORM对数据库进行操作，奉行代码优先的理念，将Python程序员和数据库管理员进行分工解耦。</p><p>现在编辑<code>myapp/models.py</code>文件</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p>注：</p><ol><li><p>首先要引入<code>from django.db import models</code>, 因为每一个类都是<code>django.db.models.Model</code>的子类。每一个字段都是<code>Field</code>类的一个实例。例如用于保存字符数据的CharField和用于保存时间类型的DateTimeField，它们告诉Django每一个字段保存的数据类型。</p></li><li><p>每一个Field实例的名字就是字段的名字（如： question_text 或者 pub_date ）。在你的Python代码中会使用这个值，你的数据库也会将这个值作为表的列名。</p></li><li><p>一些Field类必须提供某些特定的参数。例如CharField需要你指定max_length。这不仅是数据库结构的需要，同样也用于数据验证功能。</p></li><li><p>有必填参数，当然就会有可选参数，比如在votes里我们将其默认值设为0.</p></li><li><p>最后请注意，我们使用<code>ForeignKey</code>定义了一个外键关系。它告诉Django，每一个Choice关联到一个对应的Question（注意要将外键写在‘多’的一方）。Django支持通用的数据关系：一对一，多对一和多对多。</p></li></ol><p><img src="/2019/07/03/Django基本流程/1562135831184.png" alt="1562135831184"></p><h1 id="6-在数据库中生成数据表"><a href="#6-在数据库中生成数据表" class="headerlink" title="6 在数据库中生成数据表"></a>6 在数据库中生成数据表</h1><p>需要做两步操作 生成迁移文件和执行迁移</p><p><img src="/2019/07/03/Django基本流程/1562136281156.png" alt="1562136281156"></p><h2 id="6-1-makemigrations"><a href="#6-1-makemigrations" class="headerlink" title="6.1 makemigrations"></a>6.1 makemigrations</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></tbody></table></figure><p>通过运行<code>makemigrations</code>命令，Django 会检测你对模型文件的修改，也就是告诉Django你对模型有改动，并且你想把这些改动保存为一个“迁移(migration)”。</p><p><code>migrations</code>是Django保存模型修改记录的文件，这些文件保存在磁盘上。会在 migrations下生成一个0001_initial.py文件，面保存的都是人类可读并且可编辑的内容，方便随时手动修改。</p><p><img src="/2019/07/03/Django基本流程/1562136416735.png" alt="1562136416735"></p><p><img src="/2019/07/03/Django基本流程/1562141778180.png" alt="1562141778180"></p><p>在例子中，它就是<code>polls/migrations/0001_initial.py</code>，你可以打开它看看，里面保存的都是人类可读并且可编辑的内容，方便你随时手动修改。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注：</span><br><span class="line">通过执行python manage.py sqlmigrate appname 0001命令可以看到在migration的时候实际执行的SQL语句是什么。</span><br><span class="line">执行python manage.py check命令，它将检查项目中的错误，并不实际进行迁移或者链接数据库的操作</span><br></pre></td></tr></tbody></table></figure><h2 id="6-2-migrate"><a href="#6-2-migrate" class="headerlink" title="6.2 migrate"></a>6.2 migrate</h2><p>运行migrate命令，在数据库中进行真正的表操作了。</p><p><code>python manage.py migrate</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">use 数据库名称；</span><br><span class="line">show tables；</span><br><span class="line">select * from 表名；</span><br><span class="line">desc 表名；</span><br><span class="line">create database databasename；</span><br><span class="line">drop database databasename；</span><br></pre></td></tr></tbody></table></figure><p>migrate命令对所有还未实施的迁移记录进行操作，本质上就是将你对模型的修改体现到数据库中具体的表上面。Django通过一张叫做django_migrations的表，记录并跟踪已经实施的migrate动作，通过对比获得哪些migrations尚未提交。</p><p>migrations的功能非常强大，允许你随时修改你的模型，而不需要删除或者新建你的数据库或数据表，在不丢失数据的同时，实时动态更新数据库</p><p><strong>修改模型时的操作分三步</strong></p><ul><li>在models.py中修改模型；</li><li>运行<code>python manage.py makemigrations</code>为改动创建迁移记录；</li><li>运行<code>python manage.py migrate</code>，将操作同步到数据库。</li></ul><p>之所以要将创建和实施迁移的动作分成两个命令两步走是因为你也许要通过版本控制系统（例如github，svn）提交你的项目代码，如果没有一个中间过程的保存文件（migrations），那么github如何知道以及记录、同步、实施你所进行过的模型修改动作呢？毕竟，github不和数据库直接打交道，也没法和你本地的数据库通信。但是分开之后，你只需要将你的migration文件（例如上面的0001）上传到github，它就会知道一切。</p><h2 id="6-3-错误"><a href="#6-3-错误" class="headerlink" title="6.3 错误"></a>6.3 错误</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Django在根据models生成数据库表时报 init() missing 1 required positional argument: 'on_delete'</span><br><span class="line">解决办法:</span><br><span class="line">在django2.0后，定义外键和一对一关系的时候需要加on_delete选项，此参数为了避免两个表里的数据不一致问题，不然会报错：</span><br><span class="line">https://www.cnblogs.com/phyger/p/8035253.html</span><br></pre></td></tr></tbody></table></figure><h1 id="7-使用模型的API"><a href="#7-使用模型的API" class="headerlink" title="7 使用模型的API"></a>7 使用模型的API</h1><p>模型、数据库表、 数据库数据之间的使用。</p><p>注：一般是在view（视图）中使用，视图通过使用模型的api去获取数据，然后将数据传递给模板，模板经过渲染之后再浏览器进行显示。下面的测试使用python的shell环境进行测试。</p><h2 id="7-1-进入Python的shell"><a href="#7-1-进入Python的shell" class="headerlink" title="7.1 进入Python的shell"></a>7.1 进入Python的shell</h2><p>通过<code>python manage.py shell</code>进入Python的shell环境，相比较直接输入“python”命令的方式进入Python环境，调用<code>manage.py</code>参数能将<code>DJANGO_SETTINGS_MODULE</code>环境变量导入，它将自动按照<code>mysite/settings.py</code>中的设置，配置好你的python shell环境，这样，你就可以导入和调用任何你项目内的模块了。</p><h2 id="7-2-导入包"><a href="#7-2-导入包" class="headerlink" title="7.2 导入包"></a>7.2 导入包</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">>>>from myapp.models import Grades,Students #引入我们在模型中定义的类</span><br><span class="line">>>>from django.utils import timezone </span><br><span class="line">#Django推荐使用timezone.now()代替python内置的datetime.datetime.now()</span><br><span class="line"># 这个timezone就来自于Django的依赖库pytz</span><br><span class="line">>>>from datetime import * #导入 python自带的datetime模块</span><br></pre></td></tr></tbody></table></figure><h2 id="7-3-查询所有数据"><a href="#7-3-查询所有数据" class="headerlink" title="7.3 查询所有数据"></a>7.3 查询所有数据</h2><p>object是模型属性—用于模型对象和数据库交互 .</p><p>objects = Manager（） 是管理器类型的对象 ,是Model和数据库进行查询的接口。</p><p>定义在<code>from django.db import models</code>中用于模型对象和数据库交互是默认自动生成的属性，但我们是可以自定义管理器对象。</p><p>如果不自己定义，<code>objects=models.Manager()</code>查询类的属性时都是<code>类名.objects.方法</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">>>> Students.objects.all()</span><br><span class="line"><QuerySet []></span><br><span class="line">#现在系统中没有Students对象，数据库中没有数据</span><br></pre></td></tr></tbody></table></figure><h2 id="7-4-添加数据"><a href="#7-4-添加数据" class="headerlink" title="7.4 添加数据"></a>7.4 添加数据</h2><p><img src="/2019/07/03/Django基本流程/1562145422874.png" alt="1562145422874"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">>>> grade1=Grades()</span><br><span class="line">>>> grade1.gname="python04"</span><br><span class="line">>>> grade1.gdate=datetime(year=2017,month=7,day=17)</span><br><span class="line">>>> grade1.ggirlnum=3</span><br><span class="line">>>> grade1.gboynum=70</span><br><span class="line">#必须调用save()函数才能在数据库中添加数据</span><br><span class="line">>>> grade1.save()</span><br></pre></td></tr></tbody></table></figure><p>添加数据后，再次进行查询：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">>>> Grades.objects.all()</span><br><span class="line"><QuerySet [<Grades: Grades object (1)>]></span><br></pre></td></tr></tbody></table></figure><p>上面的<code><QuerySet [<Grades: Grades object (1)>]></code>是一个不可读的内容展示，你无法从中获得任何直观的信息，为此我们需要一点小技巧，让Django在打印对象时显示一些我们指定的信息。</p><p>返回<code>myapp/models.py</code>文件，修改一下类，代码如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Grades(models.Model):</span><br><span class="line">    gname    = models.CharField(max_length=20)</span><br><span class="line">    gdate    = models.DateTimeField()</span><br><span class="line">    ggirlnum = models.IntegerField()</span><br><span class="line">    gboynum  = models.IntegerField()</span><br><span class="line">    isDelete = models.BooleanField(default=False)</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.gname</span><br></pre></td></tr></tbody></table></figure><p>退出shell 环境，然后重新进入，另需要重新导入模块：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">>>>from myapp.models import Grades,Students </span><br><span class="line">>>>from django.utils import timezone </span><br><span class="line">>>>from datetime import * </span><br><span class="line">>>>Grades.objects.all()</span><br><span class="line"><QuerySet [<Grades: python04>]></span><br></pre></td></tr></tbody></table></figure><h2 id="7-5-查看对象"><a href="#7-5-查看对象" class="headerlink" title="7.5 查看对象"></a>7.5 查看对象</h2><p>Django提供了大量的关键字参数查询API</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> >>>Grades.objects.filter(id=1)</span><br><span class="line"><QuerySet [<Grades: python04>]></span><br><span class="line"></span><br><span class="line">>>> Grades.objects.filter(gname='python04')</span><br><span class="line"><QuerySet [<Grades: python04>]></span><br><span class="line"></span><br><span class="line">>>> Grades.objects.filter(gboynum=33)</span><br><span class="line"><QuerySet [<Grades: python05>]></span><br><span class="line"></span><br><span class="line">>>> Grades.objects.filter(ggirlnum=3)</span><br><span class="line"><QuerySet [<Grades: python04>, <Grades: python05>]></span><br><span class="line"></span><br><span class="line"># 查询一个不存在的ID，会弹出异常</span><br><span class="line">>>> Grades.objects.get(id=3)</span><br><span class="line">myapp.models.Grades.DoesNotExist: Grades matching query does not exist.</span><br><span class="line"># Django为主键查询提供了一个缩写：pk。与Grades.objects.get(id=1)效果相同</span><br><span class="line">>>> Grades.objects.get(pk=1)</span><br><span class="line"><Grades: python04></span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/03/Django基本流程/1562151852163.png" alt="1562151852163">Django提供了大量的关键字参数查询API</p><p>pycharm中 .idea文件</p><h2 id="7-6-修改数据"><a href="#7-6-修改数据" class="headerlink" title="7.6 修改数据"></a>7.6 修改数据</h2><p>通过python的属性调用方式，访问模型字段的值</p><p>通过修改属性来修改字段的值，然后显式的调用save方法进行保存。</p><p><img src="/2019/07/03/Django基本流程/1562151896833.png" alt="1562151896833"></p><h2 id="7-7-删除数据"><a href="#7-7-删除数据" class="headerlink" title="7.7 删除数据"></a>7.7 删除数据</h2><p><img src="/2019/07/03/Django基本流程/1562152008621.png" alt="1562152008621"></p><h2 id="7-8-关联对象"><a href="#7-8-关联对象" class="headerlink" title="7.8 关联对象"></a>7.8 关联对象</h2><p><img src="/2019/07/03/Django基本流程/1562201834269.png" alt="1562201834269"></p><p>获取关联对象的集合：</p><p>问题：如果表的关联很多，一环扣一环怎么办？</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">>>> stu2=Students(sname="jone",sage=30,scontend="我是jone",sgrade=grade1)</span><br><span class="line">>>> stu2.save()</span><br><span class="line">问题：如果关联不存在，怎么办？</span><br></pre></td></tr></tbody></table></figure><h1 id="8-启动服务器"><a href="#8-启动服务器" class="headerlink" title="8 启动服务器"></a>8 启动服务器</h1><p><img src="/2019/07/03/Django基本流程/1562152242518.png" alt="1562152242518"></p><h1 id="9-admin站点管理"><a href="#9-admin站点管理" class="headerlink" title="9 admin站点管理"></a>9 admin站点管理</h1><p>​        很多时候，我们不光要开发针对客户使用的前端页面，还要给后台管理人员提供相应的管理界面。但是大多数时候为你的团队或客户编写用于增加、修改和删除内容的后台管理站点是一件非常乏味的工作并且没有多少创造性，而且也需要花不少的时间和精力。Django最大的优点之一，就是体贴的为你提供了一个基于项目model创建的一个后台管理站点admin。这个界面只给站点管理员使用，并不对大众开放。虽然admin的界面可能不是那么美观，功能不是那么强大，内容不一定符合你的要求，但是它是免费的、现成的，并且还是可定制的</p><p><img src="/2019/07/03/Django基本流程/1562202339101.png" alt="1562202339101"></p><p>负责添加、修改、删除内容，内容指的是数据，数据库中的数据，通过可视化界面来修改数据。</p><p>公告访问：一般不需要</p><h2 id="9-1-配置Admin应用"><a href="#9-1-配置Admin应用" class="headerlink" title="9.1 配置Admin应用"></a>9.1 配置Admin应用</h2><p><img src="/2019/07/03/Django基本流程/1562202449069.png" alt="1562202449069"></p><h2 id="9-2-创建管理员用户"><a href="#9-2-创建管理员用户" class="headerlink" title="9.2 创建管理员用户"></a>9.2 创建管理员用户</h2><ol><li>首先，我们需要通过下面的命令，创建一个可以登录admin站点的用户：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>输入用户名：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Username: admin</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>输入邮箱地址：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Email address: xxx@xxx.xxx</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>输入密码：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Password: **********</span><br><span class="line">Password (again): *********</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li><p>修改密码：</p><p><strong>方法一</strong></p><p>在Terminal中执行：python manage.py changepassword your_name（其中“your_name”为你要修改密码的用户名），根据提示内容修改即可。</p><p><strong>方法二</strong></p><p>进入shell环境，执行：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">u = User.objects.get(username=<span class="string">'your_name'</span>)</span><br><span class="line">u.set_password(<span class="string">'new_password'</span>)</span><br><span class="line">u.save()</span><br></pre></td></tr></tbody></table></figure><p><strong>比较</strong></p><p>方法一有密码强度验证，方法二不会校验密码强度</p></li></ol><h2 id="9-3-启动开发服务器"><a href="#9-3-启动开发服务器" class="headerlink" title="9.3 启动开发服务器"></a>9.3 启动开发服务器</h2><p>服务器启动后，在浏览器访问<code>http://127.0.0.1:8000/admin/</code>。你就能看到admin的登陆界面了：</p><p><img src="/2019/07/03/Django基本流程/88-1.png" alt="image"></p><p>在实际环境中，为了站点的安全性，我们一般不能将管理后台的url随便暴露给他人，不能用<code>/admin/</code>这么简单的路径。</p><p>打开根url路由文件<code>mysite/urls.py</code>，修改其中admin.site.urls对应的表达式</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path('control/', admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>这样，我们必须访问<code>http://127.0.0.1:8000/control/</code>才能进入admin界面。</p><h2 id="9-4-汉化"><a href="#9-4-汉化" class="headerlink" title="9.4 汉化"></a>9.4 汉化</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = 'zh-Hans'</span><br><span class="line"></span><br><span class="line">TIME_ZONE = 'Asia/shanghai'</span><br><span class="line">#注：不需要重启服务，直接刷新页面就好</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/03/Django基本流程/1562206077049.png" alt="1562206077049"></p><p>当前只有两个可编辑的内容：groups和users。它们是<code>django.contrib.auth</code>模块提供的身份认证框架。</p><h2 id="9-5-管理数据表"><a href="#9-5-管理数据表" class="headerlink" title="9.5 管理数据表"></a>9.5 管理数据表</h2><h3 id="9-5-1修改admin-py文件"><a href="#9-5-1修改admin-py文件" class="headerlink" title="9.5.1修改admin.py文件"></a>9.5.1修改admin.py文件</h3><p>在 app 中存在admin.py文件，进行修改。</p><ol><li>导入类（表）</li><li>进行注册</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Grades,Students</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line">admin.site.register(Grades)</span><br><span class="line">admin.site.register(Students)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/03/Django基本流程/1562206550066.png" alt="1562206550066"></p><h3 id="9-5-2-自定义管理界面"><a href="#9-5-2-自定义管理界面" class="headerlink" title="9.5.2 自定义管理界面"></a>9.5.2 自定义管理界面</h3><p>点击进入 ，界面不友好，进行修改，则需要自定义管理界面：</p><p><img src="/2019/07/03/Django基本流程/1562206707180.png" alt="1562206707180"></p><p><img src="/2019/07/03/Django基本流程/1562206728468.png" alt="1562206728468"></p><h4 id="自定义管理界面步骤："><a href="#自定义管理界面步骤：" class="headerlink" title="自定义管理界面步骤："></a>自定义管理界面步骤：</h4><ol><li>定义类，继承<code>admin.ModelAdmin</code></li><li>在类中添加属性</li><li>注册</li></ol><p>问题：admin管理注册的时候，可以所有类一起进行注册吗？</p><p>答：不能，看<code>admin.site.register()</code>函数的参数</p><h4 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h4><p><img src="/2019/07/03/Django基本流程/1562207616473.png" alt="1562207616473"></p><p>添加list_display:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Grades,Students</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GradesAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'pk'</span>, <span class="string">'gname'</span>, <span class="string">'gdate'</span>, <span class="string">'ggirlnum'</span>, <span class="string">'gboynum'</span>,<span class="string">'isDelete'</span>]</span><br><span class="line">admin.site.register(Grades,GradesAdmin)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/03/Django基本流程/1562207461779.png" alt="1562207461779"></p><p>添加 list_filter:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_filter = ["gname"]</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/03/Django基本流程/1562207931443.png" alt="1562207931443"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_filter = ["gname","gdate"]</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/03/Django基本流程/1562207896404.png" alt="1562207896404"></p><p>添加search_fields </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = ["gname"]</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/03/Django基本流程/1562208118111.png" alt="1562208118111"></p><p>添加 list_per_page</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_per_page = 5</span><br></pre></td></tr></tbody></table></figure><p>区分添加页和修改页</p><p>添加页：点击右上角的添加GRADES</p><p><img src="/2019/07/03/Django基本流程/1562208280569.png" alt="1562208280569"></p><p>修改页:点击具体某一条数据</p><p><img src="/2019/07/03/Django基本流程/1562208309520.png" alt="1562208309520"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fields ：修改显示的顺序</span><br><span class="line">fieldsets ：分组显示</span><br><span class="line">两者不能同时用，只是针对添加页和修改页起作用</span><br></pre></td></tr></tbody></table></figure><h4 id="关联对象："><a href="#关联对象：" class="headerlink" title="关联对象："></a>关联对象：</h4><p><img src="/2019/07/03/Django基本流程/1562209278881.png" alt="1562209278881"></p><p><img src="/2019/07/03/Django基本流程/1562209743129.png" alt="1562209743129"></p><p>需要三步：</p><ol><li>需要 创建一个类，继承<code>admin.TabularInline</code>或者<code>admin.StackedInline</code></li><li>需要设置model和extra两个变量</li><li>需要在GradesAdmin类中添加inlines</li></ol><p><img src="/2019/07/03/Django基本流程/1562209952396.png" alt="1562209952396"></p><h4 id="布尔值显示问题："><a href="#布尔值显示问题：" class="headerlink" title="布尔值显示问题："></a>布尔值显示问题：</h4><p>字段类型为布尔值变量，显示的时候如果想要显示代表的含义，则需要自定义函数：</p><p><img src="/2019/07/03/Django基本流程/1562210636893.png" alt="1562210636893"></p><p><img src="/2019/07/03/Django基本流程/1562210765572.png" alt="1562210765572"></p><p>定义一个函数，进行判断，然后在list_display中将函数传入。</p><p><img src="/2019/07/03/Django基本流程/1562210852149.png" alt="1562210852149"></p><h4 id="执行动作的位置"><a href="#执行动作的位置" class="headerlink" title="执行动作的位置"></a>执行动作的位置</h4><p>如图：目前执行动作位置在左上角，可以进行调整。</p><p><img src="/2019/07/03/Django基本流程/1562210983941.png" alt="1562210983941"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 执行动作的位置</span><br><span class="line">actions_on_top = False</span><br><span class="line">actions_on_bottom = True</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/03/Django基本流程/1562211070297.png" alt="1562211070297"></p><h3 id="9-5-3-使用装饰器进行注册"><a href="#9-5-3-使用装饰器进行注册" class="headerlink" title="9.5.3 使用装饰器进行注册"></a>9.5.3 使用装饰器进行注册</h3><p><img src="/2019/07/03/Django基本流程/1562211354685.png" alt="1562211354685"></p><h1 id="10-视图的基本使用"><a href="#10-视图的基本使用" class="headerlink" title="10 视图的基本使用"></a>10 视图的基本使用</h1><h2 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1 概述"></a>10.1 概述</h2><p>一个视图就是一个页面，通常提供特定的功能，使用特定的模板。</p><p><img src="/2019/07/03/Django基本流程/1562211688876.png" alt="1562211688876"></p><h2 id="10-2-编写视图"><a href="#10-2-编写视图" class="headerlink" title="10.2 编写视图"></a>10.2 编写视图</h2><p>编写一个简单的视图：（没有用到模板）</p><ol><li>导入HttpResponse</li><li>定义函数</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line">def index(request) </span><br><span class="line">#第一个参数：一般是requset 请求体 浏览器发送给服务器的</span><br><span class="line">#return httpResponse（） 服务器给浏览器返回的内容</span><br><span class="line">return HttpResponse("sunck is a good man")</span><br></pre></td></tr></tbody></table></figure><h2 id="10-3-配置url"><a href="#10-3-配置url" class="headerlink" title="10.3 配置url"></a>10.3 配置url</h2><ol><li>修改project目录下的url.py文件</li><li>在myapp应用目录下创建一个url.py文件</li></ol><p><img src="/2019/07/03/Django基本流程/1562218787510.png" alt="1562218787510"></p><p>关于urlconf：</p><p><a href="https://blog.csdn.net/sinat_38369128/article/details/81702636" target="_blank" rel="noopener">https://blog.csdn.net/sinat_38369128/article/details/81702636</a></p><p>第一，目前 路由（url）到视图（View）的流程可以概括为四个步骤：</p><ol><li>url匹配</li><li>正则捕获</li><li>变量类型转化</li><li>视图调用</li></ol><p>Django2.0 和之前相比多了 <em>变量类型转化</em> 这一步骤。</p><p>第二，新的path语法可以解决一下以下几个场景：</p><ul><li>类型自动转化</li><li>公用正则表达式</li></ul><p>每个视图至少做两件事之一：返回一个包含请求页面的HttpResponse对象或者弹出一个类似Http404的异常。</p><h1 id="11-模板的基本使用"><a href="#11-模板的基本使用" class="headerlink" title="11 模板的基本使用"></a>11 模板的基本使用</h1><p><img src="/2019/07/03/Django基本流程/1562220797530.png" alt="1562220797530"></p><h2 id="11-1-概述"><a href="#11-1-概述" class="headerlink" title="11.1 概述"></a>11.1 概述</h2><p>模板是HTML页面，可以根据视图中传过来的数据进行填充。</p><h2 id="11-2-创建模板的目录"><a href="#11-2-创建模板的目录" class="headerlink" title="11.2 创建模板的目录"></a>11.2 创建模板的目录</h2><p>方法1：</p><p>在与应用app同级目录下创建一个templates的文件，然后在该目录下创建对应应用的模板目录。</p><p>方法2：在应用目录下创建一个新的<code>templates</code>目录，Django会在它里面查找模板文件</p><h2 id="11-3-配置模板路径："><a href="#11-3-配置模板路径：" class="headerlink" title="11.3 配置模板路径："></a>11.3 配置模板路径：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: {</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>项目的 <code>TEMPLATES</code>配置项描述了 Django 如何载入和渲染模板</p><ol><li><p><code>'BACKEND': 'django.template.backends.django.DjangoTemplates',</code>默认的设置文件设置了 <code>DjangoTemplates</code> 后端 </p></li><li><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">#变量__file__表示文件本身，输出的是一个绝对路径</span><br></pre></td></tr></tbody></table></figure></li><li><p>将 <code>APP_DIRS</code>设置成了 True。这一选项将会让 <code>DjangoTemplates</code> 在每个 <code>INSTALLED_APPS</code> 文件夹中寻找 “templates” 子目录</p></li></ol><h2 id="11-4-定义模板"><a href="#11-4-定义模板" class="headerlink" title="11.4 定义模板"></a>11.4 定义模板</h2><h1 id="12-流程梳理"><a href="#12-流程梳理" class="headerlink" title="12 流程梳理"></a>12 流程梳理</h1><p><img src="/2019/07/03/Django基本流程/1562230502899.png" alt="1562230502899"></p><p>参考：</p><p><a href="http://www.liujiangblog.com/blog/36/" target="_blank" rel="noopener">http://www.liujiangblog.com/blog/36/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-设计表结构&quot;&gt;&lt;a href=&quot;#1-设计表结构&quot; class=&quot;headerlink&quot; title=&quot;1 设计表结构&quot;&gt;&lt;/a&gt;1 设计表结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/07/03/Django基本流程/1562133052512.png
      
    
    </summary>
    
      <category term="django" scheme="https://qianlongshenyong.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://qianlongshenyong.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django创建项目</title>
    <link href="https://qianlongshenyong.github.io/2019/07/02/django%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <id>https://qianlongshenyong.github.io/2019/07/02/django创建项目/</id>
    <published>2019-07-02T08:21:01.000Z</published>
    <updated>2019-07-07T09:56:25.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-在cmd或Linux命令行环境下创建Django项目"><a href="#1-在cmd或Linux命令行环境下创建Django项目" class="headerlink" title="1. 在cmd或Linux命令行环境下创建Django项目"></a>1. 在cmd或Linux命令行环境下创建Django项目</h1><h2 id="1-1-创建django工程"><a href="#1-1-创建django工程" class="headerlink" title="1.1 创建django工程"></a>1.1 创建django工程</h2><p>在windows的cmd环境中(Linux中类同)，新建或者进入你想创建Django项目的目录，然后输入下面的命令：</p><p><code>django-admin startproject mysite</code></p><p>这样就会在当前目录下创建一个叫做mysite的Django项目</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D:\test>django-admin startproject mysite</span><br><span class="line">D:\test>dir</span><br><span class="line"></span><br><span class="line"> D:\test 的目录</span><br><span class="line"></span><br><span class="line">2019/4/20  11:19    <DIR>          .</span><br><span class="line">2019/4/20  11:19    <DIR>          ..</span><br><span class="line">2019/4/20  11:19    <DIR>          mysite</span><br><span class="line">               0 个文件              0 字节</span><br><span class="line">               3 个目录 102,160,605,184 可用字节</span><br></pre></td></tr></tbody></table></figure><p>可以看到Django自动帮我们创建了一个mysite文件夹，这是项目的根目录。</p><p>在mysite根目录中，又有一个mysite目录，这是整个项目的配置文件目录（一定不要和同名的根目录搞混淆了），还有一个manage.py文件，是整个项目的管理脚本</p><h2 id="1-2-django项目目录说明"><a href="#1-2-django项目目录说明" class="headerlink" title="1.2 django项目目录说明"></a>1.2 django项目目录说明</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---mysite               外层的mysite/目录与Django无关，只是你项目的容器，可以任意重命名。</span><br><span class="line">    |   db.sqlite3</span><br><span class="line">    |   manage.py            一个命令行工具，可以使我们用多种方式对Django项目进行交互</span><br><span class="line">    ---mysite</span><br><span class="line">        |   settings.py      项目的配置文件</span><br><span class="line">        |   urls.py          项目的url声明</span><br><span class="line">        |   wsgi.py          项目与wsgi兼容的web服务器入口</span><br><span class="line">        |   init.py          一个空文件，它告诉python这个目录应该被视为一个python包</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/02/django创建项目/1562120589450.png" alt="1562120589450"></p><h2 id="1-3-运行django"><a href="#1-3-运行django" class="headerlink" title="1.3 运行django"></a>1.3 运行django</h2><p>在项目根目录下，运行<code>python manage.py runserver</code>，Django会以<code>127.0.0.1:8000</code>这个默认配置启动开发服务器。</p><p><strong>Django提供了一个用于开发的web服务器，使你无需配置一个类似Ngnix的生产服务器，就能让站点运行起来。</strong>这是一个由Python编写的轻量级服务器，简易并且不安全，因此不要将它用于生产环境。</p><p><img src="/2019/07/02/django创建项目/1562120456540.png" alt="1562120456540"></p><p>注：</p><p>Django的开发服务器（以后简称服务器）默认运行在内部的8000端口，如果你想指定端口，请在命令中显示给出：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">8080</span></span><br></pre></td></tr></tbody></table></figure><p>如果想修改服务器的ip地址</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 0:8000</span><br></pre></td></tr></tbody></table></figure><p>0 是 0.0.0.0 的简写，Django将运行在0.0.0.0:8000上，整个局域网内都将可以访问站点，而不只是是本机</p><h1 id="2-在windows下使用Pycharm创建Django工程"><a href="#2-在windows下使用Pycharm创建Django工程" class="headerlink" title="2. 在windows下使用Pycharm创建Django工程"></a>2. 在windows下使用Pycharm创建Django工程</h1><p>2018以后的Pycharm版本都支持同时创建虚拟环境和Django工程</p><p>首先打开Pycharm，点击<code>file-->new project</code>，出现下面的对话框，注意下面的红框提示：</p><p><img src="/2019/07/02/django创建项目/85-6.png" alt="image"></p><ul><li><p>在Location处选择工程目录</p></li><li><p>在New environment using处选择Virtualenv（这可能需要你提前pip install virtualenv进行虚拟工具virtualenv的安装）。通常情况下，虚拟环境会以venv的名字，自动在工程目录下生成。</p></li><li><p>在Base interpreter处，选择你要使用的Python解释器</p></li><li><p>下面两个单选框，根据需要自行选择</p></li></ul><ul><li>如果想使用现成的解释器或者虚拟环境，请选择Existing interpreter</li></ul><p><img src="/2019/07/02/django创建项目/85-7-1562121384003.png" alt="image"></p><p>再点开下方的More Settings：</p><ul><li>Template language:选择使用的模板语言，默认Django就行，可选Jinjia。</li><li>Templates folder：Pycharm安利给我们的功能，额外创建一个工程级别的模板文件的保存目录，可以不设置，空着，这里使用默认设置吧。</li><li>启用Admin，一般勾上。</li></ul><p><img src="/2019/07/02/django创建项目/85-8.png" alt="image"></p><p>没什么问题了，就点击Create吧。</p><p>下面就是一段时间的等待，Pycharm会帮助我们自动创建虚拟环境，以及安装最新版本的Django。</p><p>创建完成之后，进入Pycharm的设置菜单，可以看到当前Django版本是最新的2.2版本。如果你要指定过去的版本，比如2.1、1.11等，那就不能这么操作了，需要在命令行下自己创建虚拟环境并安装django。或者在这里先删除Django，再安装你想要的指定版本。</p><p><img src="/2019/07/02/django创建项目/85-9.png" alt="image"></p><p>看下我们当前的状态，注意venv这个虚拟环境目录，以及我们额外创建的templats目录：</p><p><img src="/2019/07/02/django创建项目/85-10.png" alt="image"></p><p>点击绿色的三角，启动默认的开发服务器，如果看到欢迎界面，说明一切OK!</p><p>注：使用pycharm在离线环境下安装，容易出现问题：因为需要通过pip安装django </p><p>问题：在pycharm中settings </p><p><img src="/2019/07/02/django创建项目/1562122956740.png" alt="1562122956740"></p><p>这个的作用</p><p><img src="/2019/07/02/django创建项目/1562123393004.png" alt="1562123393004"></p><p>参考：</p><p><a href="https://www.cnblogs.com/wcwnina/p/9136398.html" target="_blank" rel="noopener">pycharm创建django项目</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-在cmd或Linux命令行环境下创建Django项目&quot;&gt;&lt;a href=&quot;#1-在cmd或Linux命令行环境下创建Django项目&quot; class=&quot;headerlink&quot; title=&quot;1. 在cmd或Linux命令行环境下创建Django项目&quot;&gt;&lt;/a&gt;1
      
    
    </summary>
    
      <category term="django" scheme="https://qianlongshenyong.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://qianlongshenyong.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django安装</title>
    <link href="https://qianlongshenyong.github.io/2019/07/01/django%E5%AE%89%E8%A3%85/"/>
    <id>https://qianlongshenyong.github.io/2019/07/01/django安装/</id>
    <published>2019-07-01T08:21:01.000Z</published>
    <updated>2019-07-07T09:47:19.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>Django是由Python编写的Web框架，依赖Python环境，所以需要提前安装好Python解释器。</p><p>进行Python + Django的Web开发，最佳IDE环境是Pycharm</p><p>Django对Python版本的依赖关系如下表所示：</p><table><thead><tr><th align="left">Django 版本</th><th align="left">Python 版本</th></tr></thead><tbody><tr><td align="left">1.8</td><td align="left">2.7, 3.2 (until the end of 2016), 3.3, 3.4, 3.5</td></tr><tr><td align="left">1.9, 1.10</td><td align="left">2.7, 3.4, 3.5</td></tr><tr><td align="left">1.11</td><td align="left">2.7，3.4，3.5，3.6，3.7 (1.11.17添加)</td></tr><tr><td align="left">2.0</td><td align="left">3.4，3.5，3.6，3.7</td></tr><tr><td align="left">2.1，2.2</td><td align="left">3.5, 3.6, 3.7</td></tr></tbody></table><h1 id="2-安装Django"><a href="#2-安装Django" class="headerlink" title="2 安装Django"></a>2 安装Django</h1><h2 id="2-1-通过pip-安装Django"><a href="#2-1-通过pip-安装Django" class="headerlink" title="2.1 通过pip 安装Django"></a>2.1 通过pip 安装Django</h2><p>Django本质上是Python语言的一个类库，因此可以通过pip工具安装。这也是最简便最好的安装方式。不建议通过下载安装包或者编译源码进行安装的方法，除非你的环境无法连接外部网络。</p><p>这里介绍windows系统下pip命令安装方式。</p><p>win+r，调出cmd，运行命令：<code>pip install django</code>，自动安装PyPi提供的最新版本。</p><p>如果要指定版本，可使用<code>pip install django==2.2</code>这种形式。</p><p>在Linux操作系统中，也是一样，使用pip工具包安装Django</p><h2 id="2-2-验证"><a href="#2-2-验证" class="headerlink" title="2.2 验证"></a>2.2 验证</h2><p>进入Python交互式环境</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> django</span><br><span class="line">print(django.get_version())</span><br></pre></td></tr></tbody></table></figure><p>或者使用<code>pip list</code>命令，查看是否存在Django模块</p><h2 id="2-3-配置系统环境变量"><a href="#2-3-配置系统环境变量" class="headerlink" title="2.3 配置系统环境变量"></a>2.3 配置系统环境变量</h2><p>成功安装Django后，以windows为例，在Python根目录下的Scripts目录中可找到一个<code>django-admin.exe</code>文件，这是Django的核心管理程序，最好将它加入操作系统的环境变量中，这样在以后的调用会比较方便</p><p>回到cmd界面，运行<code>django-admin help</code>，能看到下面的内容表示环境变量设置成功。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\USER>django-admin help</span><br><span class="line"></span><br><span class="line">Type 'django-admin help <subcommand>' for help on a specific subcommand.</span><br><span class="line"></span><br><span class="line">Available subcommands:</span><br><span class="line"></span><br><span class="line">[django]</span><br><span class="line">    check</span><br><span class="line">    compilemessages</span><br><span class="line">    createcachetable</span><br><span class="line">    dbshell</span><br><span class="line">    diffsettings</span><br><span class="line">    dumpdata</span><br><span class="line">    flush</span><br><span class="line">    inspectdb</span><br><span class="line">    loaddata</span><br><span class="line">    makemessages</span><br><span class="line">    makemigrations</span><br><span class="line">    migrate</span><br><span class="line">    runserver</span><br><span class="line">    sendtestemail</span><br><span class="line">    shell</span><br><span class="line">    showmigrations</span><br><span class="line">    sqlflush</span><br><span class="line">    sqlmigrate</span><br><span class="line">    sqlsequencereset</span><br><span class="line">    squashmigrations</span><br><span class="line">    startapp</span><br><span class="line">    startproject</span><br><span class="line">    test</span><br><span class="line">    testserver</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/07/01/django安装/1562119593874.png" alt="1562119593874"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h1&gt;&lt;p&gt;Django是由Python编写的Web框架，依赖Python环境，所以需要提前安装好Python解释器。&lt;/p&gt;
&lt;p&gt;进
      
    
    </summary>
    
      <category term="django" scheme="https://qianlongshenyong.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://qianlongshenyong.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的博客</title>
    <link href="https://qianlongshenyong.github.io/2019/06/23/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://qianlongshenyong.github.io/2019/06/23/搭建自己的博客/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2019-06-29T07:06:58.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>技术：Hexo+github</p><p>好处：</p><ol><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li><li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li></ol><p>准备工作：</p><ul><li>有一个github账号，没有的话去注册一个；</li><li>安装了node.js、npm，并了解相关基础知识；</li><li>安装了git for windows（或者其它git客户端）</li></ul><h1 id="搭建github博客"><a href="#搭建github博客" class="headerlink" title="搭建github博客"></a>搭建github博客</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><ol><li><p>登录github账号后新创建一格式为：<code>你的用户名.github.io</code> </p><p>比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/" target="_blank" rel="noopener">http://test.github.io</a> 了</p></li><li><p>点击Settings设置，然后往下拉，找到<code>github pages</code>，点击<code>choose a theme</code>选择喜欢主题</p></li><li><p>在浏览器输入 <code>用户名.github.io</code>访问自己博客</p></li></ol><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><a id="more"></a><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><h2 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h2><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>官网： <a href="http://hexo.io/" target="_blank" rel="noopener">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>​        由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 生成hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的</span><br><span class="line">hexo s # 开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容</span><br><span class="line">hexo clean #清理public的内容，然后再来重新生成和发布</span><br><span class="line">hexo d # 上传</span><br><span class="line">hexo new "postName" #新建文章</span><br><span class="line">hexo new page "pageName" #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br><span class="line">缩写：</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line">组合命令：</span><br><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></tbody></table></figure><p>注：</p><ul><li>执行hexo d 命令之前，可能需要安装 npm install hexo-deployer-git –save</li><li>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</li></ul><h2 id="hexo环境搭建："><a href="#hexo环境搭建：" class="headerlink" title="hexo环境搭建："></a>hexo环境搭建：</h2><ol><li><p>安装git</p></li><li><p>安装<a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a></p></li><li><p>创建存放hexo组件的目录，然后<code>Git bash here</code></p></li><li><p>安装hexo <code>npm install hexo -g</code></p></li><li><p><code>hexo -v</code>，检查hexo是否安装成功</p></li><li><p>初始化文件夹 <code>hexo init</code></p><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><p><img src="/2019/06/23/搭建自己的博客/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="目录结构"></p></li><li><p><code>npm install</code> 安装所需要的组件</p></li><li><p>将Hexo于Github page 联系起来，设置Git的user name 和email</p><p><code>git config --global user.name "qianlongshenyong"</code></p><p><code>git config --global user.email"1320005085@qq.com"</code></p></li><li><p>修改 <code>D:\blog\_config.yml</code> 并保存</p></li></ol><p><img src="/2019/06/23/搭建自己的博客/%E4%BF%AE%E6%94%B9.jpg" alt="修改"></p><ol start="10"><li><code>hexo s</code> 启动服务，在本地4000端口开启服务</li><li>在浏览器输入127.0.0.1:4000访问博客主页</li></ol><h1 id="使用Hexo修改博客主题"><a href="#使用Hexo修改博客主题" class="headerlink" title="使用Hexo修改博客主题"></a>使用Hexo修改博客主题</h1><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>选择博客主题<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p></li><li><p>选择tomotoes主题</p></li><li><p>复制主题链接，</p></li><li><p><code>D:\blog\themes</code>,右键选择git bash here</p></li><li><p>下载所选主题<code>git clone https://github.com/Tomotoes/hexo-theme-tomotoes.git</code></p></li><li><p>修改主题名称为tomotoes</p></li><li><p>修改 <code>D:\blog\_config.yml</code> 中theme并保存</p><p><img src="/2019/06/23/搭建自己的博客/%E4%BF%AE%E6%94%B9theme.png" alt="修改theme"></p></li><li><p>然后在==blog目录==下打开git输入<code>hexo s</code>，本地预览效果.</p></li></ol><h2 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h2><p>按照<code>https://github.com/Tomotoes/hexo-theme-tomotoes.git</code>有部署文档</p><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><p>还是在 Hexo 根目录，如果以下插件已安装过，无需再次安装。</p><h4 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h4><p>主题默认使用 less 作为 css 预处理工具。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-less --save</span><br></pre></td></tr></tbody></table></figure><h4 id="Feed"><a href="#Feed" class="headerlink" title="Feed"></a>Feed</h4><p>用于生成 rss。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></tbody></table></figure><h4 id="Json-content"><a href="#Json-content" class="headerlink" title="Json-content"></a>Json-content</h4><p>用于生成静态站点数据，用作站内搜索的数据源。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content --save</span><br></pre></td></tr></tbody></table></figure><h4 id="QRCode"><a href="#QRCode" class="headerlink" title="QRCode"></a>QRCode</h4><p>用于生成微信分享二维码。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-helper-qrcode --save</span><br></pre></td></tr></tbody></table></figure><h4 id="hexo-wordcount"><a href="#hexo-wordcount" class="headerlink" title="hexo-wordcount"></a>hexo-wordcount</h4><p>用来显示文章更多信息，比如：字数，阅读时间</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></tbody></table></figure><h4 id="hexo-abbrlink"><a href="#hexo-abbrlink" class="headerlink" title="hexo-abbrlink"></a>hexo-abbrlink</h4><p><strong>文章唯一链接，有利于SEO，主题脚本也对其有依赖</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></tbody></table></figure><h4 id="hexo-filter-github-emojis"><a href="#hexo-filter-github-emojis" class="headerlink" title="hexo-filter-github-emojis"></a>hexo-filter-github-emojis</h4><p>Emoji插件，让文章更生动</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></tbody></table></figure><p>安装完成后再次运行<code>hexo s</code></p><h2 id="开启页面"><a href="#开启页面" class="headerlink" title="开启页面"></a>开启页面</h2><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></tbody></table></figure><p>修改 hexo/source/tags/index.md 的元数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layout: tags</span><br><span class="line">comments: false</span><br></pre></td></tr></tbody></table></figure><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></tbody></table></figure><p>修改 hexo/source/categories/index.md 的元数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layout: categories</span><br><span class="line">comments: false</span><br></pre></td></tr></tbody></table></figure><h3 id="关于页"><a href="#关于页" class="headerlink" title="关于页"></a>关于页</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></tbody></table></figure><p>修改 hexo/source/about/index.md 的元数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: about</span><br><span class="line">comments: true</span><br><span class="line">reward: false</span><br></pre></td></tr></tbody></table></figure><h2 id="根据需求修改主题的配置"><a href="#根据需求修改主题的配置" class="headerlink" title="根据需求修改主题的配置"></a>根据需求修改主题的配置</h2><ol><li><p>修改 `D:\blog_config.yml</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: </span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">author: peter</span><br><span class="line">emial: 1320005085@qq.com</span><br><span class="line">url:</span><br></pre></td></tr></tbody></table></figure></li><li><p>保存预览</p></li><li><p><code>npm install –save hexo-deployer-git</code></p></li><li><p><code>hexo d –g</code></p></li></ol><h1 id="关于-config-yml"><a href="#关于-config-yml" class="headerlink" title="关于_config.yml"></a>关于_config.yml</h1><h2 id="hexo的-config-yml"><a href="#hexo的-config-yml" class="headerlink" title="hexo的_config.yml"></a>hexo的_config.yml</h2><p>站点配置文件，也就是站点根目录下的_config.yml配置文件</p><h2 id="主题的-config-yml"><a href="#主题的-config-yml" class="headerlink" title="主题的_config.yml"></a>主题的_config.yml</h2><p>主题配置文件，位于theme文件夹中对应主题的文件夹下的_config.yml。</p><h3 id="设置主页的Menu"><a href="#设置主页的Menu" class="headerlink" title="设置主页的Menu"></a>设置主页的Menu</h3><p>设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，它将用于匹配图标以及翻译。</p><p>菜单示例配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  #about: /about</span><br><span class="line">  #categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="https://blog.csdn.net/tonydandelion2014/article/details/61615898" target="_blank" rel="noopener">https://blog.csdn.net/tonydandelion2014/article/details/61615898</a></p><h1 id="hexo写博客"><a href="#hexo写博客" class="headerlink" title="hexo写博客"></a>hexo写博客</h1><p>配置完之后，有两种方法写博客。</p><h2 id="方法1-通过hexo命令"><a href="#方法1-通过hexo命令" class="headerlink" title="方法1 通过hexo命令"></a>方法1 通过hexo命令</h2><p>定位到blog目录下，执行<code>hexo new 'my-first-blog'</code>hexo会帮我们在<code>_posts</code>下生成相关md文件,我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p><p><img src="/2019/06/23/搭建自己的博客/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9A%84%E6%A0%BC%E5%BC%8F.png" alt="自动生成的格式"></p><h2 id="方法2-自己创建md文件"><a href="#方法2-自己创建md文件" class="headerlink" title="方法2 自己创建md文件"></a>方法2 自己创建md文件</h2><p>通过typora等md编辑器自己创建md文件，但是必须符合以下开头。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">注:冒号后面必须要有空格 这是yaml语法的规定</span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/06/23/搭建自己的博客/%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8.jpg" alt="参数列表"></p><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><p><code>hexo new page 'postName'</code>命令和<code>hexo new 'postName'</code>有什么区别呢</p><p>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><h1 id="如何让博文列表不显示全部内容"><a href="#如何让博文列表不显示全部内容" class="headerlink" title="如何让博文列表不显示全部内容"></a>如何让博文列表不显示全部内容</h1><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p><p>答案是在合适的位置加上<code><!--more--></code>即可，例如：</p><h1 id="图片设置问题"><a href="#图片设置问题" class="headerlink" title="图片设置问题"></a>图片设置问题</h1><p>解决方式是使用<strong>CodeFalling/hexo-asset-image插件</strong>。</p><h4 id="1-post-asset-folder"><a href="#1-post-asset-folder" class="headerlink" title="1. post_asset_folder"></a>1. post_asset_folder</h4><p>首先确认<strong>_config.yml</strong>中有<strong>post_asset_folder:true</strong>。</p><p>Hexo提供了一种更方便管理Asset的设定：<strong>post_asset_folder</strong><br> 当您设置<strong>post_asset_folder</strong>为<strong>true</strong>参数后，在建立文件时，Hexo<br> 会自动建立一个与文章同名的文件夹；以前的文章也可以自己手动创建同名文件夹。</p><h4 id="2-安装-hexo-asset-image"><a href="#2-安装-hexo-asset-image" class="headerlink" title="2. 安装 hexo-asset-image"></a>2. 安装 hexo-asset-image</h4><p>在hexo的目录下执行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></tbody></table></figure><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><p>完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。结构如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本地图片测试</span><br><span class="line">├── logo.jpg</span><br><span class="line">本地图片测试.md</span><br></pre></td></tr></tbody></table></figure><p>这样的目录结构（目录名和文章名一致），只要使用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](本地图片测试/logo.jpg)</span><br></pre></td></tr></tbody></table></figure><p>就可以插入图片。其中[]里面不写文字则没有图片标题。<br> 生成的结构为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public/2016/3/9/本地图片测试</span><br><span class="line">                ├── index.html</span><br><span class="line">                ├── logo.jpg</span><br></pre></td></tr></tbody></table></figure><p>同时，生成的 html 是</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/2016/3/9/本地图片测试/logo.jpg)</span><br></pre></td></tr></tbody></table></figure><p>而不是愚蠢的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](本地图片测试/logo.jpg)</span><br></pre></td></tr></tbody></table></figure><p>个人喜欢typora编辑器，在偏好设置中将图片插入设置为如下：然后只需将后缀.assets删除，即可与hexo文件夹名称相同。</p><p><img src="/2019/06/23/搭建自己的博客/%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E6%A0%BC%E5%BC%8F.png" alt="图片保存格式"></p><h1 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h1><ol><li><p>输入hexo d –g 提示找不到git </p><p>解决办法：<code>npm install –save hexo-deployer-git</code></p></li><li><p>点击主页或者归档显示找不到页面</p><p>解决办法：主题设置中有关于开启页面的指令</p></li><li><p>图片显示不出来问题</p><p>解决办法：采用CodeFalling/hexo-asset-image</p></li></ol><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ol><li><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#hexo%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#hexo%E7%AE%80%E4%BB%8B</a></li><li><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></li><li><a href="https://foxgrin.github.io/posts/29757/" target="_blank" rel="noopener">https://foxgrin.github.io/posts/29757/</a></li><li><a href="https://blog.annieyu.com/posts/3333782006.html" target="_blank" rel="noopener">https://blog.annieyu.com/posts/3333782006.html</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      通过hexo+github搭建属于自己的博客
    
    </summary>
    
      <category term="工具" scheme="https://qianlongshenyong.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="https://qianlongshenyong.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
